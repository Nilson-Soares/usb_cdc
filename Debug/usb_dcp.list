
usb_dcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d60  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002f44  08002f44  00012f44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002fb8  08002fb8  00012fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000017c  20000000  08002fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000012d8  2000017c  08003144  0002017c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001454  08003144  00021454  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001220a  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000307e  00000000  00000000  000323af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f51  00000000  00000000  0003542d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000970  00000000  00000000  0003b380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a38  00000000  00000000  0003bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005610  00000000  00000000  0003c728  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000035a1  00000000  00000000  00041d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000452d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001768  00000000  00000000  00045358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000017c 	.word	0x2000017c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002f2c 	.word	0x08002f2c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000180 	.word	0x20000180
 8000220:	08002f2c 	.word	0x08002f2c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b97a 	b.w	8000530 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	460e      	mov	r6, r1
 800025c:	4604      	mov	r4, r0
 800025e:	9d08      	ldr	r5, [sp, #32]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d150      	bne.n	8000306 <__udivmoddi4+0xb2>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d96c      	bls.n	8000344 <__udivmoddi4+0xf0>
 800026a:	fab2 fe82 	clz	lr, r2
 800026e:	f1be 0f00 	cmp.w	lr, #0
 8000272:	d00b      	beq.n	800028c <__udivmoddi4+0x38>
 8000274:	f1ce 0c20 	rsb	ip, lr, #32
 8000278:	fa01 f60e 	lsl.w	r6, r1, lr
 800027c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000280:	fa02 f70e 	lsl.w	r7, r2, lr
 8000284:	ea4c 0c06 	orr.w	ip, ip, r6
 8000288:	fa00 f40e 	lsl.w	r4, r0, lr
 800028c:	0c3a      	lsrs	r2, r7, #16
 800028e:	fbbc f9f2 	udiv	r9, ip, r2
 8000292:	b2bb      	uxth	r3, r7
 8000294:	fb02 cc19 	mls	ip, r2, r9, ip
 8000298:	fb09 fa03 	mul.w	sl, r9, r3
 800029c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80002a0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80002a4:	45b2      	cmp	sl, r6
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x6a>
 80002a8:	19f6      	adds	r6, r6, r7
 80002aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80002ae:	f080 8125 	bcs.w	80004fc <__udivmoddi4+0x2a8>
 80002b2:	45b2      	cmp	sl, r6
 80002b4:	f240 8122 	bls.w	80004fc <__udivmoddi4+0x2a8>
 80002b8:	f1a9 0902 	sub.w	r9, r9, #2
 80002bc:	443e      	add	r6, r7
 80002be:	eba6 060a 	sub.w	r6, r6, sl
 80002c2:	fbb6 f0f2 	udiv	r0, r6, r2
 80002c6:	fb02 6610 	mls	r6, r2, r0, r6
 80002ca:	fb00 f303 	mul.w	r3, r0, r3
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80002d4:	42a3      	cmp	r3, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x98>
 80002d8:	19e4      	adds	r4, r4, r7
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 810b 	bcs.w	80004f8 <__udivmoddi4+0x2a4>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	f240 8108 	bls.w	80004f8 <__udivmoddi4+0x2a4>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	2100      	movs	r1, #0
 80002ee:	1ae4      	subs	r4, r4, r3
 80002f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d062      	beq.n	80003be <__udivmoddi4+0x16a>
 80002f8:	2300      	movs	r3, #0
 80002fa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fe:	602c      	str	r4, [r5, #0]
 8000300:	606b      	str	r3, [r5, #4]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0xc6>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d055      	beq.n	80003ba <__udivmoddi4+0x166>
 800030e:	2100      	movs	r1, #0
 8000310:	e885 0041 	stmia.w	r5, {r0, r6}
 8000314:	4608      	mov	r0, r1
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	f040 808f 	bne.w	8000442 <__udivmoddi4+0x1ee>
 8000324:	42b3      	cmp	r3, r6
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xda>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80fc 	bhi.w	8000526 <__udivmoddi4+0x2d2>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb66 0603 	sbc.w	r6, r6, r3
 8000334:	2001      	movs	r0, #1
 8000336:	46b4      	mov	ip, r6
 8000338:	2d00      	cmp	r5, #0
 800033a:	d040      	beq.n	80003be <__udivmoddi4+0x16a>
 800033c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	b912      	cbnz	r2, 800034c <__udivmoddi4+0xf8>
 8000346:	2701      	movs	r7, #1
 8000348:	fbb7 f7f2 	udiv	r7, r7, r2
 800034c:	fab7 fe87 	clz	lr, r7
 8000350:	f1be 0f00 	cmp.w	lr, #0
 8000354:	d135      	bne.n	80003c2 <__udivmoddi4+0x16e>
 8000356:	2101      	movs	r1, #1
 8000358:	1bf6      	subs	r6, r6, r7
 800035a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800035e:	fa1f f887 	uxth.w	r8, r7
 8000362:	fbb6 f2fc 	udiv	r2, r6, ip
 8000366:	fb0c 6612 	mls	r6, ip, r2, r6
 800036a:	fb08 f002 	mul.w	r0, r8, r2
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000374:	42b0      	cmp	r0, r6
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x134>
 8000378:	19f6      	adds	r6, r6, r7
 800037a:	f102 33ff 	add.w	r3, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x132>
 8000380:	42b0      	cmp	r0, r6
 8000382:	f200 80d2 	bhi.w	800052a <__udivmoddi4+0x2d6>
 8000386:	461a      	mov	r2, r3
 8000388:	1a36      	subs	r6, r6, r0
 800038a:	fbb6 f0fc 	udiv	r0, r6, ip
 800038e:	fb0c 6610 	mls	r6, ip, r0, r6
 8000392:	fb08 f800 	mul.w	r8, r8, r0
 8000396:	b2a3      	uxth	r3, r4
 8000398:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x15c>
 80003a0:	19e4      	adds	r4, r4, r7
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x15a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80b9 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0xa0>
 80003ba:	4629      	mov	r1, r5
 80003bc:	4628      	mov	r0, r5
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003c6:	f1ce 0320 	rsb	r3, lr, #32
 80003ca:	fa26 f203 	lsr.w	r2, r6, r3
 80003ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80003d2:	fbb2 f1fc 	udiv	r1, r2, ip
 80003d6:	fa1f f887 	uxth.w	r8, r7
 80003da:	fb0c 2211 	mls	r2, ip, r1, r2
 80003de:	fa06 f60e 	lsl.w	r6, r6, lr
 80003e2:	fa20 f303 	lsr.w	r3, r0, r3
 80003e6:	fb01 f908 	mul.w	r9, r1, r8
 80003ea:	4333      	orrs	r3, r6
 80003ec:	0c1e      	lsrs	r6, r3, #16
 80003ee:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003f2:	45b1      	cmp	r9, r6
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x1ba>
 80003fa:	19f6      	adds	r6, r6, r7
 80003fc:	f101 32ff 	add.w	r2, r1, #4294967295
 8000400:	f080 808c 	bcs.w	800051c <__udivmoddi4+0x2c8>
 8000404:	45b1      	cmp	r9, r6
 8000406:	f240 8089 	bls.w	800051c <__udivmoddi4+0x2c8>
 800040a:	3902      	subs	r1, #2
 800040c:	443e      	add	r6, r7
 800040e:	eba6 0609 	sub.w	r6, r6, r9
 8000412:	fbb6 f0fc 	udiv	r0, r6, ip
 8000416:	fb0c 6210 	mls	r2, ip, r0, r6
 800041a:	fb00 f908 	mul.w	r9, r0, r8
 800041e:	b29e      	uxth	r6, r3
 8000420:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000424:	45b1      	cmp	r9, r6
 8000426:	d907      	bls.n	8000438 <__udivmoddi4+0x1e4>
 8000428:	19f6      	adds	r6, r6, r7
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	d271      	bcs.n	8000514 <__udivmoddi4+0x2c0>
 8000430:	45b1      	cmp	r9, r6
 8000432:	d96f      	bls.n	8000514 <__udivmoddi4+0x2c0>
 8000434:	3802      	subs	r0, #2
 8000436:	443e      	add	r6, r7
 8000438:	eba6 0609 	sub.w	r6, r6, r9
 800043c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000440:	e78f      	b.n	8000362 <__udivmoddi4+0x10e>
 8000442:	f1c1 0720 	rsb	r7, r1, #32
 8000446:	fa22 f807 	lsr.w	r8, r2, r7
 800044a:	408b      	lsls	r3, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa26 f407 	lsr.w	r4, r6, r7
 8000454:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000458:	fbb4 f9fe 	udiv	r9, r4, lr
 800045c:	fa1f fc83 	uxth.w	ip, r3
 8000460:	fb0e 4419 	mls	r4, lr, r9, r4
 8000464:	408e      	lsls	r6, r1
 8000466:	fa20 f807 	lsr.w	r8, r0, r7
 800046a:	fb09 fa0c 	mul.w	sl, r9, ip
 800046e:	ea48 0806 	orr.w	r8, r8, r6
 8000472:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000476:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800047a:	45a2      	cmp	sl, r4
 800047c:	fa02 f201 	lsl.w	r2, r2, r1
 8000480:	fa00 f601 	lsl.w	r6, r0, r1
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x244>
 8000486:	18e4      	adds	r4, r4, r3
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d244      	bcs.n	8000518 <__udivmoddi4+0x2c4>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d942      	bls.n	8000518 <__udivmoddi4+0x2c4>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	441c      	add	r4, r3
 8000498:	eba4 040a 	sub.w	r4, r4, sl
 800049c:	fbb4 f0fe 	udiv	r0, r4, lr
 80004a0:	fb0e 4410 	mls	r4, lr, r0, r4
 80004a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80004a8:	fa1f f888 	uxth.w	r8, r8
 80004ac:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004b0:	45a4      	cmp	ip, r4
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x270>
 80004b4:	18e4      	adds	r4, r4, r3
 80004b6:	f100 3eff 	add.w	lr, r0, #4294967295
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2bc>
 80004bc:	45a4      	cmp	ip, r4
 80004be:	d927      	bls.n	8000510 <__udivmoddi4+0x2bc>
 80004c0:	3802      	subs	r0, #2
 80004c2:	441c      	add	r4, r3
 80004c4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c8:	fba0 8902 	umull	r8, r9, r0, r2
 80004cc:	eba4 0c0c 	sub.w	ip, r4, ip
 80004d0:	45cc      	cmp	ip, r9
 80004d2:	46c2      	mov	sl, r8
 80004d4:	46ce      	mov	lr, r9
 80004d6:	d315      	bcc.n	8000504 <__udivmoddi4+0x2b0>
 80004d8:	d012      	beq.n	8000500 <__udivmoddi4+0x2ac>
 80004da:	b155      	cbz	r5, 80004f2 <__udivmoddi4+0x29e>
 80004dc:	ebb6 030a 	subs.w	r3, r6, sl
 80004e0:	eb6c 060e 	sbc.w	r6, ip, lr
 80004e4:	fa06 f707 	lsl.w	r7, r6, r7
 80004e8:	40cb      	lsrs	r3, r1
 80004ea:	431f      	orrs	r7, r3
 80004ec:	40ce      	lsrs	r6, r1
 80004ee:	602f      	str	r7, [r5, #0]
 80004f0:	606e      	str	r6, [r5, #4]
 80004f2:	2100      	movs	r1, #0
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6f7      	b.n	80002ec <__udivmoddi4+0x98>
 80004fc:	4689      	mov	r9, r1
 80004fe:	e6de      	b.n	80002be <__udivmoddi4+0x6a>
 8000500:	4546      	cmp	r6, r8
 8000502:	d2ea      	bcs.n	80004da <__udivmoddi4+0x286>
 8000504:	ebb8 0a02 	subs.w	sl, r8, r2
 8000508:	eb69 0e03 	sbc.w	lr, r9, r3
 800050c:	3801      	subs	r0, #1
 800050e:	e7e4      	b.n	80004da <__udivmoddi4+0x286>
 8000510:	4670      	mov	r0, lr
 8000512:	e7d7      	b.n	80004c4 <__udivmoddi4+0x270>
 8000514:	4618      	mov	r0, r3
 8000516:	e78f      	b.n	8000438 <__udivmoddi4+0x1e4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7bd      	b.n	8000498 <__udivmoddi4+0x244>
 800051c:	4611      	mov	r1, r2
 800051e:	e776      	b.n	800040e <__udivmoddi4+0x1ba>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e744      	b.n	80003b0 <__udivmoddi4+0x15c>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0xe4>
 800052a:	3a02      	subs	r2, #2
 800052c:	443e      	add	r6, r7
 800052e:	e72b      	b.n	8000388 <__udivmoddi4+0x134>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_InitTick+0x3c>)
{
 8000538:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053a:	7818      	ldrb	r0, [r3, #0]
 800053c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000540:	fbb3 f3f0 	udiv	r3, r3, r0
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <HAL_InitTick+0x40>)
 8000546:	6810      	ldr	r0, [r2, #0]
 8000548:	fbb0 f0f3 	udiv	r0, r0, r3
 800054c:	f000 f8a0 	bl	8000690 <HAL_SYSTICK_Config>
 8000550:	4604      	mov	r4, r0
 8000552:	b958      	cbnz	r0, 800056c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000554:	2d0f      	cmp	r5, #15
 8000556:	d809      	bhi.n	800056c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	4602      	mov	r2, r0
 800055a:	4629      	mov	r1, r5
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f854 	bl	800060c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_InitTick+0x44>)
 8000566:	4620      	mov	r0, r4
 8000568:	601d      	str	r5, [r3, #0]
 800056a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800056c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800056e:	bd38      	pop	{r3, r4, r5, pc}
 8000570:	20000000 	.word	0x20000000
 8000574:	20000118 	.word	0x20000118
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_Init+0x20>)
{
 800057e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	f043 0310 	orr.w	r3, r3, #16
 8000588:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	f000 f82d 	bl	80005e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffd0 	bl	8000534 <HAL_InitTick>
  HAL_MspInit();
 8000594:	f002 fa26 	bl	80029e4 <HAL_MspInit>
}
 8000598:	2000      	movs	r0, #0
 800059a:	bd08      	pop	{r3, pc}
 800059c:	40022000 	.word	0x40022000

080005a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <HAL_IncTick+0x10>)
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_IncTick+0x14>)
 80005a4:	6811      	ldr	r1, [r2, #0]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	440b      	add	r3, r1
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200003bc 	.word	0x200003bc
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_GetTick+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200003bc 	.word	0x200003bc

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b538      	push	{r3, r4, r5, lr}
 80005c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff fff6 	bl	80005b8 <HAL_GetTick>
 80005cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d0:	bf1e      	ittt	ne
 80005d2:	4b04      	ldrne	r3, [pc, #16]	; (80005e4 <HAL_Delay+0x20>)
 80005d4:	781b      	ldrbne	r3, [r3, #0]
 80005d6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	1b40      	subs	r0, r0, r5
 80005de:	4284      	cmp	r4, r0
 80005e0:	d8fa      	bhi.n	80005d8 <HAL_Delay+0x14>
  {
  }
}
 80005e2:	bd38      	pop	{r3, r4, r5, pc}
 80005e4:	20000000 	.word	0x20000000

080005e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005ea:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005f6:	041b      	lsls	r3, r3, #16
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000602:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000604:	60d3      	str	r3, [r2, #12]
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	68dc      	ldr	r4, [r3, #12]
 8000612:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000616:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061c:	2b04      	cmp	r3, #4
 800061e:	bf28      	it	cs
 8000620:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000628:	bf98      	it	ls
 800062a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	fa05 f303 	lsl.w	r3, r5, r3
 8000630:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000634:	bf88      	it	hi
 8000636:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	4019      	ands	r1, r3
 800063a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063c:	fa05 f404 	lsl.w	r4, r5, r4
 8000640:	3c01      	subs	r4, #1
 8000642:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000644:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000646:	ea42 0201 	orr.w	r2, r2, r1
 800064a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	bfa9      	itett	ge
 8000650:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	4b06      	ldrlt	r3, [pc, #24]	; (8000670 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	b2d2      	uxtbge	r2, r2
 8000658:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	bfbb      	ittet	lt
 800065e:	f000 000f 	andlt.w	r0, r0, #15
 8000662:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	541a      	strblt	r2, [r3, r0]
 800066a:	bd30      	pop	{r4, r5, pc}
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	e000ed14 	.word	0xe000ed14

08000674 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000674:	2800      	cmp	r0, #0
 8000676:	db08      	blt.n	800068a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000678:	2301      	movs	r3, #1
 800067a:	0942      	lsrs	r2, r0, #5
 800067c:	f000 001f 	and.w	r0, r0, #31
 8000680:	fa03 f000 	lsl.w	r0, r3, r0
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <HAL_NVIC_EnableIRQ+0x18>)
 8000686:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100

08000690 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000690:	3801      	subs	r0, #1
 8000692:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000696:	d20a      	bcs.n	80006ae <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e010 	.word	0xe000e010
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80006be:	4604      	mov	r4, r0
{
 80006c0:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80006c2:	b360      	cbz	r0, 800071e <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80006c4:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80006c8:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80006ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006ce:	b91b      	cbnz	r3, 80006d8 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006d0:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006d4:	f002 fa32 	bl	8002b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006d8:	2303      	movs	r3, #3
 80006da:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80006de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006e0:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006e2:	466e      	mov	r6, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80006e4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 80006e8:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 80006ec:	bf08      	it	eq
 80006ee:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80006f0:	f001 f884 	bl	80017fc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000700:	4625      	mov	r5, r4
 8000702:	e886 0003 	stmia.w	r6, {r0, r1}
 8000706:	1d27      	adds	r7, r4, #4
 8000708:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800070c:	f855 0b10 	ldr.w	r0, [r5], #16
 8000710:	f000 ffc8 	bl	80016a4 <USB_CoreInit>
 8000714:	4606      	mov	r6, r0
 8000716:	b120      	cbz	r0, 8000722 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000718:	2302      	movs	r3, #2
 800071a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800071e:	2501      	movs	r5, #1
 8000720:	e050      	b.n	80007c4 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000722:	4601      	mov	r1, r0
 8000724:	6820      	ldr	r0, [r4, #0]
 8000726:	f001 f86f 	bl	8001808 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800072a:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	261c      	movs	r6, #28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000732:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000734:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8000738:	b2c2      	uxtb	r2, r0
 800073a:	4596      	cmp	lr, r2
 800073c:	f100 0001 	add.w	r0, r0, #1
 8000740:	d81c      	bhi.n	800077c <HAL_PCD_Init+0xc0>
 8000742:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000744:	261c      	movs	r6, #28
 8000746:	4619      	mov	r1, r3
 8000748:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800074a:	4586      	cmp	lr, r0
 800074c:	f103 0301 	add.w	r3, r3, #1
 8000750:	d822      	bhi.n	8000798 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000752:	466e      	mov	r6, sp
 8000754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000756:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800075c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000760:	e886 0003 	stmia.w	r6, {r0, r1}
 8000764:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000768:	6820      	ldr	r0, [r4, #0]
 800076a:	f001 f88f 	bl	800188c <USB_DevInit>
 800076e:	2301      	movs	r3, #1
 8000770:	4605      	mov	r5, r0
 8000772:	b300      	cbz	r0, 80007b6 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000774:	2202      	movs	r2, #2
 8000776:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 800077a:	e7d0      	b.n	800071e <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800077c:	fb06 4302 	mla	r3, r6, r2, r4
 8000780:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000788:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800078c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000790:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000792:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000794:	6519      	str	r1, [r3, #80]	; 0x50
 8000796:	e7cf      	b.n	8000738 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000798:	fb06 4200 	mla	r2, r6, r0, r4
 800079c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80007a0:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007a4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007a8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007ac:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80007b4:	e7c8      	b.n	8000748 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80007b6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80007ba:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80007be:	6820      	ldr	r0, [r4, #0]
 80007c0:	f001 fb2d 	bl	8001e1e <USB_DevDisconnect>

  return HAL_OK;
}
 80007c4:	4628      	mov	r0, r5
 80007c6:	b00b      	add	sp, #44	; 0x2c
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007ca <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80007ca:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 80007ce:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80007d0:	2b01      	cmp	r3, #1
{
 80007d2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80007d4:	d00c      	beq.n	80007f0 <HAL_PCD_Start+0x26>
 80007d6:	2301      	movs	r3, #1
 80007d8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80007dc:	6800      	ldr	r0, [r0, #0]
 80007de:	f001 fb12 	bl	8001e06 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80007e2:	6820      	ldr	r0, [r4, #0]
 80007e4:	f001 f804 	bl	80017f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80007ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80007f0:	2002      	movs	r0, #2
}
 80007f2:	bd10      	pop	{r4, pc}

080007f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80007f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80007f8:	6805      	ldr	r5, [r0, #0]
{
 80007fa:	b085      	sub	sp, #20
 80007fc:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80007fe:	4628      	mov	r0, r5
 8000800:	f001 fb48 	bl	8001e94 <USB_GetMode>
 8000804:	9000      	str	r0, [sp, #0]
 8000806:	2800      	cmp	r0, #0
 8000808:	f040 8119 	bne.w	8000a3e <HAL_PCD_IRQHandler+0x24a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800080c:	6820      	ldr	r0, [r4, #0]
 800080e:	f001 fb12 	bl	8001e36 <USB_ReadInterrupts>
 8000812:	2800      	cmp	r0, #0
 8000814:	f000 8113 	beq.w	8000a3e <HAL_PCD_IRQHandler+0x24a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000818:	6820      	ldr	r0, [r4, #0]
 800081a:	f001 fb0c 	bl	8001e36 <USB_ReadInterrupts>
 800081e:	0783      	lsls	r3, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000820:	bf48      	it	mi
 8000822:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000824:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000826:	bf42      	ittt	mi
 8000828:	6953      	ldrmi	r3, [r2, #20]
 800082a:	f003 0302 	andmi.w	r3, r3, #2
 800082e:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000830:	f001 fb01 	bl	8001e36 <USB_ReadInterrupts>
 8000834:	0307      	lsls	r7, r0, #12
 8000836:	f100 8105 	bmi.w	8000a44 <HAL_PCD_IRQHandler+0x250>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800083a:	6820      	ldr	r0, [r4, #0]
 800083c:	f001 fafb 	bl	8001e36 <USB_ReadInterrupts>
 8000840:	0346      	lsls	r6, r0, #13
 8000842:	d50c      	bpl.n	800085e <HAL_PCD_IRQHandler+0x6a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000844:	6820      	ldr	r0, [r4, #0]
 8000846:	f001 fb02 	bl	8001e4e <USB_ReadDevAllInEpInterrupt>
 800084a:	4626      	mov	r6, r4
 800084c:	4683      	mov	fp, r0

      epnum = 0U;
 800084e:	f04f 0a00 	mov.w	sl, #0
 8000852:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      while (ep_intr != 0U)
 8000856:	f1bb 0f00 	cmp.w	fp, #0
 800085a:	f040 8154 	bne.w	8000b06 <HAL_PCD_IRQHandler+0x312>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800085e:	6820      	ldr	r0, [r4, #0]
 8000860:	f001 fae9 	bl	8001e36 <USB_ReadInterrupts>
 8000864:	2800      	cmp	r0, #0
 8000866:	da0d      	bge.n	8000884 <HAL_PCD_IRQHandler+0x90>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000868:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800086c:	4620      	mov	r0, r4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      HAL_PCD_ResumeCallback(hpcd);
 8000876:	f002 f9c3 	bl	8002c00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800087a:	6822      	ldr	r2, [r4, #0]
 800087c:	6953      	ldr	r3, [r2, #20]
 800087e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000882:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000884:	6820      	ldr	r0, [r4, #0]
 8000886:	f001 fad6 	bl	8001e36 <USB_ReadInterrupts>
 800088a:	0500      	lsls	r0, r0, #20
 800088c:	d50b      	bpl.n	80008a6 <HAL_PCD_IRQHandler+0xb2>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800088e:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8000892:	07d9      	lsls	r1, r3, #31
 8000894:	d502      	bpl.n	800089c <HAL_PCD_IRQHandler+0xa8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000896:	4620      	mov	r0, r4
 8000898:	f002 f99a 	bl	8002bd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800089c:	6822      	ldr	r2, [r4, #0]
 800089e:	6953      	ldr	r3, [r2, #20]
 80008a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008a4:	6153      	str	r3, [r2, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80008a6:	6820      	ldr	r0, [r4, #0]
 80008a8:	f001 fac5 	bl	8001e36 <USB_ReadInterrupts>
 80008ac:	04c2      	lsls	r2, r0, #19
 80008ae:	d534      	bpl.n	800091a <HAL_PCD_IRQHandler+0x126>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80008b0:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 80008b4:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80008b6:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80008b8:	f023 0301 	bic.w	r3, r3, #1
 80008bc:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80008be:	6820      	ldr	r0, [r4, #0]
 80008c0:	f000 ffba 	bl	8001838 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80008c4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008c8:	6860      	ldr	r0, [r4, #4]
 80008ca:	f505 6310 	add.w	r3, r5, #2304	; 0x900
 80008ce:	9a00      	ldr	r2, [sp, #0]
 80008d0:	4282      	cmp	r2, r0
 80008d2:	f040 8196 	bne.w	8000c02 <HAL_PCD_IRQHandler+0x40e>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80008d6:	69f3      	ldr	r3, [r6, #28]
 80008d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80008dc:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80008de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f000 81a1 	beq.w	8000c28 <HAL_PCD_IRQHandler+0x434>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80008e6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80008ea:	f043 030b 	orr.w	r3, r3, #11
 80008ee:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80008f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80008f4:	f043 030b 	orr.w	r3, r3, #11
 80008f8:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80008fa:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80008fe:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000902:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000906:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800090a:	6820      	ldr	r0, [r4, #0]
 800090c:	f001 fad6 	bl	8001ebc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000910:	6822      	ldr	r2, [r4, #0]
 8000912:	6953      	ldr	r3, [r2, #20]
 8000914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000918:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800091a:	6820      	ldr	r0, [r4, #0]
 800091c:	f001 fa8b 	bl	8001e36 <USB_ReadInterrupts>
 8000920:	0483      	lsls	r3, r0, #18
 8000922:	d516      	bpl.n	8000952 <HAL_PCD_IRQHandler+0x15e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8000924:	6820      	ldr	r0, [r4, #0]
 8000926:	f001 fab9 	bl	8001e9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800092a:	6820      	ldr	r0, [r4, #0]
 800092c:	f001 f844 	bl	80019b8 <USB_GetDevSpeed>
 8000930:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8000932:	6826      	ldr	r6, [r4, #0]
 8000934:	f000 fdda 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8000938:	7b22      	ldrb	r2, [r4, #12]
 800093a:	4601      	mov	r1, r0
 800093c:	4630      	mov	r0, r6
 800093e:	f000 fee3 	bl	8001708 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8000942:	4620      	mov	r0, r4
 8000944:	f002 f932 	bl	8002bac <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000948:	6822      	ldr	r2, [r4, #0]
 800094a:	6953      	ldr	r3, [r2, #20]
 800094c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000950:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000952:	6820      	ldr	r0, [r4, #0]
 8000954:	f001 fa6f 	bl	8001e36 <USB_ReadInterrupts>
 8000958:	06c7      	lsls	r7, r0, #27
 800095a:	d52a      	bpl.n	80009b2 <HAL_PCD_IRQHandler+0x1be>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800095c:	6822      	ldr	r2, [r4, #0]
 800095e:	6993      	ldr	r3, [r2, #24]
 8000960:	f023 0310 	bic.w	r3, r3, #16
 8000964:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8000966:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000968:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800096c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800096e:	f006 070f 	and.w	r7, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000972:	f040 8164 	bne.w	8000c3e <HAL_PCD_IRQHandler+0x44a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000976:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800097a:	421e      	tst	r6, r3
 800097c:	d014      	beq.n	80009a8 <HAL_PCD_IRQHandler+0x1b4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800097e:	231c      	movs	r3, #28
 8000980:	fb03 4707 	mla	r7, r3, r7, r4
 8000984:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000988:	4632      	mov	r2, r6
 800098a:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800098e:	4628      	mov	r0, r5
 8000990:	f001 f9c6 	bl	8001d20 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000994:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000998:	4433      	add	r3, r6
 800099a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800099e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80009a2:	441e      	add	r6, r3
 80009a4:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80009a8:	6822      	ldr	r2, [r4, #0]
 80009aa:	6993      	ldr	r3, [r2, #24]
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80009b2:	6820      	ldr	r0, [r4, #0]
 80009b4:	f001 fa3f 	bl	8001e36 <USB_ReadInterrupts>
 80009b8:	0706      	lsls	r6, r0, #28
 80009ba:	d507      	bpl.n	80009cc <HAL_PCD_IRQHandler+0x1d8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80009bc:	4620      	mov	r0, r4
 80009be:	f002 f8f1 	bl	8002ba4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80009c2:	6822      	ldr	r2, [r4, #0]
 80009c4:	6953      	ldr	r3, [r2, #20]
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	f001 fa32 	bl	8001e36 <USB_ReadInterrupts>
 80009d2:	02c5      	lsls	r5, r0, #11
 80009d4:	d508      	bpl.n	80009e8 <HAL_PCD_IRQHandler+0x1f4>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80009d6:	2100      	movs	r1, #0
 80009d8:	4620      	mov	r0, r4
 80009da:	f002 f919 	bl	8002c10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80009de:	6822      	ldr	r2, [r4, #0]
 80009e0:	6953      	ldr	r3, [r2, #20]
 80009e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009e6:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80009e8:	6820      	ldr	r0, [r4, #0]
 80009ea:	f001 fa24 	bl	8001e36 <USB_ReadInterrupts>
 80009ee:	0280      	lsls	r0, r0, #10
 80009f0:	d508      	bpl.n	8000a04 <HAL_PCD_IRQHandler+0x210>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80009f2:	2100      	movs	r1, #0
 80009f4:	4620      	mov	r0, r4
 80009f6:	f002 f907 	bl	8002c08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	6953      	ldr	r3, [r2, #20]
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a02:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000a04:	6820      	ldr	r0, [r4, #0]
 8000a06:	f001 fa16 	bl	8001e36 <USB_ReadInterrupts>
 8000a0a:	0041      	lsls	r1, r0, #1
 8000a0c:	d507      	bpl.n	8000a1e <HAL_PCD_IRQHandler+0x22a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f002 f902 	bl	8002c18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000a14:	6822      	ldr	r2, [r4, #0]
 8000a16:	6953      	ldr	r3, [r2, #20]
 8000a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000a1c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000a1e:	6820      	ldr	r0, [r4, #0]
 8000a20:	f001 fa09 	bl	8001e36 <USB_ReadInterrupts>
 8000a24:	0742      	lsls	r2, r0, #29
 8000a26:	d50a      	bpl.n	8000a3e <HAL_PCD_IRQHandler+0x24a>
    {
      temp = hpcd->Instance->GOTGINT;
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000a2c:	076b      	lsls	r3, r5, #29
 8000a2e:	d502      	bpl.n	8000a36 <HAL_PCD_IRQHandler+0x242>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8000a30:	4620      	mov	r0, r4
 8000a32:	f002 f8f5 	bl	8002c20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	4315      	orrs	r5, r2
 8000a3c:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000a3e:	b005      	add	sp, #20
 8000a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000a44:	6820      	ldr	r0, [r4, #0]
 8000a46:	f001 f9fa 	bl	8001e3e <USB_ReadDevAllOutEpInterrupt>
      epnum = 0U;
 8000a4a:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000a4c:	4680      	mov	r8, r0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000a4e:	f04f 0920 	mov.w	r9, #32
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000a52:	f8df a208 	ldr.w	sl, [pc, #520]	; 8000c5c <HAL_PCD_IRQHandler+0x468>
 8000a56:	f505 6630 	add.w	r6, r5, #2816	; 0xb00
      while (ep_intr != 0U)
 8000a5a:	f1b8 0f00 	cmp.w	r8, #0
 8000a5e:	f43f aeec 	beq.w	800083a <HAL_PCD_IRQHandler+0x46>
        if ((ep_intr & 0x1U) != 0U)
 8000a62:	f018 0f01 	tst.w	r8, #1
 8000a66:	d040      	beq.n	8000aea <HAL_PCD_IRQHandler+0x2f6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000a68:	b2fa      	uxtb	r2, r7
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	9201      	str	r2, [sp, #4]
 8000a70:	f001 f9f5 	bl	8001e5e <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000a74:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000a78:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000a7a:	9a01      	ldr	r2, [sp, #4]
 8000a7c:	d00f      	beq.n	8000a9e <HAL_PCD_IRQHandler+0x2aa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	60b1      	str	r1, [r6, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a82:	6821      	ldr	r1, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000a84:	6c08      	ldr	r0, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000a86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8000a8a:	eb01 1147 	add.w	r1, r1, r7, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000a8e:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000a90:	688b      	ldr	r3, [r1, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000a92:	d133      	bne.n	8000afc <HAL_PCD_IRQHandler+0x308>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8000a94:	0418      	lsls	r0, r3, #16
 8000a96:	d52d      	bpl.n	8000af4 <HAL_PCD_IRQHandler+0x300>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000a98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a9c:	608a      	str	r2, [r1, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000a9e:	f01b 0f08 	tst.w	fp, #8
 8000aa2:	d012      	beq.n	8000aca <HAL_PCD_IRQHandler+0x2d6>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000aa4:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000aa6:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8000aac:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000ab0:	4551      	cmp	r1, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000ab2:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000ab4:	d104      	bne.n	8000ac0 <HAL_PCD_IRQHandler+0x2cc>
 8000ab6:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000ab8:	bf44      	itt	mi
 8000aba:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 8000abe:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f002 f858 	bl	8002b76 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000ac6:	2208      	movs	r2, #8
 8000ac8:	60b2      	str	r2, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000aca:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000ace:	bf1c      	itt	ne
 8000ad0:	2210      	movne	r2, #16
 8000ad2:	60b2      	strne	r2, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000ad4:	f01b 0f20 	tst.w	fp, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000ad8:	bf18      	it	ne
 8000ada:	f8c6 9008 	strne.w	r9, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000ade:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000ae2:	bf1c      	itt	ne
 8000ae4:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8000ae8:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000aea:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8000aec:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8000af0:	3620      	adds	r6, #32
 8000af2:	e7b2      	b.n	8000a5a <HAL_PCD_IRQHandler+0x266>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000af4:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000af6:	bf48      	it	mi
 8000af8:	f8c1 9008 	strmi.w	r9, [r1, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000afc:	4611      	mov	r1, r2
 8000afe:	4620      	mov	r0, r4
 8000b00:	f002 f83f 	bl	8002b82 <HAL_PCD_DataOutStageCallback>
 8000b04:	e7cb      	b.n	8000a9e <HAL_PCD_IRQHandler+0x2aa>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000b06:	f01b 0f01 	tst.w	fp, #1
 8000b0a:	d072      	beq.n	8000bf2 <HAL_PCD_IRQHandler+0x3fe>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000b0c:	fa5f f38a 	uxtb.w	r3, sl
 8000b10:	4619      	mov	r1, r3
 8000b12:	6820      	ldr	r0, [r4, #0]
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	f001 f9ab 	bl	8001e70 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000b1a:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000b1c:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000b1e:	d510      	bpl.n	8000b42 <HAL_PCD_IRQHandler+0x34e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000b20:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000b22:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000b26:	f00a 020f 	and.w	r2, sl, #15
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000b2e:	ea23 0302 	bic.w	r3, r3, r2
 8000b32:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000b36:	9901      	ldr	r1, [sp, #4]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000b38:	f8c9 0008 	str.w	r0, [r9, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f002 f829 	bl	8002b94 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000b42:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000b44:	bf44      	itt	mi
 8000b46:	2308      	movmi	r3, #8
 8000b48:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000b4c:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000b4e:	bf44      	itt	mi
 8000b50:	2310      	movmi	r3, #16
 8000b52:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000b56:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000b58:	bf44      	itt	mi
 8000b5a:	2340      	movmi	r3, #64	; 0x40
 8000b5c:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000b60:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000b62:	bf44      	itt	mi
 8000b64:	2302      	movmi	r3, #2
 8000b66:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000b6a:	063f      	lsls	r7, r7, #24
 8000b6c:	d541      	bpl.n	8000bf2 <HAL_PCD_IRQHandler+0x3fe>
  if (ep->xfer_count > ep->xfer_len)
 8000b6e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8000b70:	6d37      	ldr	r7, [r6, #80]	; 0x50
 8000b72:	42bb      	cmp	r3, r7
 8000b74:	d83d      	bhi.n	8000bf2 <HAL_PCD_IRQHandler+0x3fe>
  len = ep->xfer_len - ep->xfer_count;
 8000b76:	1aff      	subs	r7, r7, r3
  len32b = (len + 3U) / 4U;
 8000b78:	6c73      	ldr	r3, [r6, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b7a:	6822      	ldr	r2, [r4, #0]
  len32b = (len + 3U) / 4U;
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	bf28      	it	cs
 8000b80:	461f      	movcs	r7, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000b82:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000b86:	3703      	adds	r7, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000b88:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b8c:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 8000b8e:	08bf      	lsrs	r7, r7, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	9b03      	ldr	r3, [sp, #12]
 8000b94:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	42bb      	cmp	r3, r7
 8000b9c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000b9e:	d326      	bcc.n	8000bee <HAL_PCD_IRQHandler+0x3fa>
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d924      	bls.n	8000bee <HAL_PCD_IRQHandler+0x3fa>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000ba4:	b963      	cbnz	r3, 8000bc0 <HAL_PCD_IRQHandler+0x3cc>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000ba6:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ba8:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000baa:	f00a 010f 	and.w	r1, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000bae:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000bb2:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000bb6:	ea22 0201 	bic.w	r2, r2, r1
 8000bba:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8000bbe:	e018      	b.n	8000bf2 <HAL_PCD_IRQHandler+0x3fe>
    len = ep->xfer_len - ep->xfer_count;
 8000bc0:	eba3 0802 	sub.w	r8, r3, r2
 8000bc4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8000bc6:	9a01      	ldr	r2, [sp, #4]
 8000bc8:	4598      	cmp	r8, r3
 8000bca:	bf28      	it	cs
 8000bcc:	4698      	movcs	r8, r3
 8000bce:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8000bd0:	fa1f f388 	uxth.w	r3, r8
 8000bd4:	9802      	ldr	r0, [sp, #8]
 8000bd6:	f000 ffdd 	bl	8001b94 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000bda:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8000bdc:	f108 0703 	add.w	r7, r8, #3
    ep->xfer_buff  += len;
 8000be0:	4443      	add	r3, r8
 8000be2:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8000be4:	6d73      	ldr	r3, [r6, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 8000be6:	08bf      	lsrs	r7, r7, #2
    ep->xfer_count += len;
 8000be8:	4443      	add	r3, r8
 8000bea:	6573      	str	r3, [r6, #84]	; 0x54
 8000bec:	e7d1      	b.n	8000b92 <HAL_PCD_IRQHandler+0x39e>
  if (ep->xfer_len <= ep->xfer_count)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d9d9      	bls.n	8000ba6 <HAL_PCD_IRQHandler+0x3b2>
        epnum++;
 8000bf2:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 8000bf6:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8000bfa:	361c      	adds	r6, #28
 8000bfc:	f109 0920 	add.w	r9, r9, #32
 8000c00:	e629      	b.n	8000856 <HAL_PCD_IRQHandler+0x62>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000c02:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	3320      	adds	r3, #32
 8000c08:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000c0c:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000c10:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000c14:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8000c18:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000c1c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c20:	9a00      	ldr	r2, [sp, #0]
 8000c22:	3201      	adds	r2, #1
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	e652      	b.n	80008ce <HAL_PCD_IRQHandler+0xda>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000c28:	6973      	ldr	r3, [r6, #20]
 8000c2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c2e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8000c32:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000c34:	6933      	ldr	r3, [r6, #16]
 8000c36:	f043 030b 	orr.w	r3, r3, #11
 8000c3a:	6133      	str	r3, [r6, #16]
 8000c3c:	e65d      	b.n	80008fa <HAL_PCD_IRQHandler+0x106>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	f47f aeb2 	bne.w	80009a8 <HAL_PCD_IRQHandler+0x1b4>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000c44:	2208      	movs	r2, #8
 8000c46:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	f001 f868 	bl	8001d20 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000c50:	231c      	movs	r3, #28
 8000c52:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000c56:	fb03 4707 	mla	r7, r3, r7, r4
 8000c5a:	e6a0      	b.n	800099e <HAL_PCD_IRQHandler+0x1aa>
 8000c5c:	4f54310a 	.word	0x4f54310a

08000c60 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000c60:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
{
 8000c64:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000c66:	2a01      	cmp	r2, #1
{
 8000c68:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c6a:	d00b      	beq.n	8000c84 <HAL_PCD_SetAddress+0x24>
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8000c72:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c76:	6800      	ldr	r0, [r0, #0]
 8000c78:	f001 f8b5 	bl	8001de6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000c82:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c84:	2002      	movs	r0, #2
}
 8000c86:	bd10      	pop	{r4, pc}

08000c88 <HAL_PCD_EP_Open>:
{
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	201c      	movs	r0, #28
 8000c8e:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8000c92:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c96:	fb00 f004 	mul.w	r0, r0, r4
  if ((ep_addr & 0x80U) == 0x80U)
 8000c9a:	d01f      	beq.n	8000cdc <HAL_PCD_EP_Open+0x54>
    ep->is_in = 1U;
 8000c9c:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c9e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8000ca2:	4428      	add	r0, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ca4:	4429      	add	r1, r5
    ep->is_in = 1U;
 8000ca6:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8000caa:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8000cac:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cae:	b2e4      	uxtb	r4, r4
 8000cb0:	700c      	strb	r4, [r1, #0]
  ep->type = ep_type;
 8000cb2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8000cb4:	b102      	cbz	r2, 8000cb8 <HAL_PCD_EP_Open+0x30>
    ep->tx_fifo_num = ep->num;
 8000cb6:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8000cb8:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8000cba:	bf04      	itt	eq
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8000cc0:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d011      	beq.n	8000cec <HAL_PCD_EP_Open+0x64>
 8000cc8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cca:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8000ccc:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cd0:	f000 fe7c 	bl	80019cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
  return ret;
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8000cdc:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cde:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 8000ce2:	4428      	add	r0, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ce4:	4429      	add	r1, r5
    ep->is_in = 0U;
 8000ce6:	f880 61fd 	strb.w	r6, [r0, #509]	; 0x1fd
 8000cea:	e7de      	b.n	8000caa <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 8000cec:	2002      	movs	r0, #2
}
 8000cee:	bd70      	pop	{r4, r5, r6, pc}

08000cf0 <HAL_PCD_EP_Close>:
{
 8000cf0:	231c      	movs	r3, #28
 8000cf2:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8000cf6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8000cfa:	b510      	push	{r4, lr}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cfc:	fb03 f302 	mul.w	r3, r3, r2
{
 8000d00:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8000d02:	d015      	beq.n	8000d30 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d04:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000d08:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000d0a:	4403      	add	r3, r0
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d12:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8000d14:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d011      	beq.n	8000d40 <HAL_PCD_EP_Close+0x50>
 8000d1c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d1e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000d20:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d24:	f000 fe94 	bl	8001a50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000d2e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d30:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
 8000d34:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000d36:	4403      	add	r3, r0
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f883 01fd 	strb.w	r0, [r3, #509]	; 0x1fd
 8000d3e:	e7e8      	b.n	8000d12 <HAL_PCD_EP_Close+0x22>
  __HAL_LOCK(hpcd);
 8000d40:	2002      	movs	r0, #2
}
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <HAL_PCD_EP_Receive>:
{
 8000d44:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d46:	241c      	movs	r4, #28
 8000d48:	f001 050f 	and.w	r5, r1, #15
 8000d4c:	436c      	muls	r4, r5
 8000d4e:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8000d52:	4404      	add	r4, r0
  ep->xfer_len = len;
 8000d54:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8000d58:	2300      	movs	r3, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d5a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d5c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8000d60:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8000d64:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d68:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d6c:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d6e:	b91d      	cbnz	r5, 8000d78 <HAL_PCD_EP_Receive+0x34>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d70:	f000 fea0 	bl	8001ab4 <USB_EP0StartXfer>
}
 8000d74:	2000      	movs	r0, #0
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d78:	f000 ff1c 	bl	8001bb4 <USB_EPStartXfer>
 8000d7c:	e7fa      	b.n	8000d74 <HAL_PCD_EP_Receive+0x30>

08000d7e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d7e:	231c      	movs	r3, #28
 8000d80:	f001 010f 	and.w	r1, r1, #15
 8000d84:	fb03 0101 	mla	r1, r3, r1, r0
}
 8000d88:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8000d8c:	4770      	bx	lr

08000d8e <HAL_PCD_EP_Transmit>:
{
 8000d8e:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d90:	241c      	movs	r4, #28
 8000d92:	f001 050f 	and.w	r5, r1, #15
 8000d96:	436c      	muls	r4, r5
 8000d98:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8000d9c:	4404      	add	r4, r0
  ep->xfer_len = len;
 8000d9e:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8000da4:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000da6:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000da8:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8000daa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dae:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000db2:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000db4:	b91d      	cbnz	r5, 8000dbe <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000db6:	f000 fe7d 	bl	8001ab4 <USB_EP0StartXfer>
}
 8000dba:	2000      	movs	r0, #0
 8000dbc:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dbe:	f000 fef9 	bl	8001bb4 <USB_EPStartXfer>
 8000dc2:	e7fa      	b.n	8000dba <HAL_PCD_EP_Transmit+0x2c>

08000dc4 <HAL_PCD_EP_SetStall>:
{
 8000dc4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dc6:	6843      	ldr	r3, [r0, #4]
 8000dc8:	f001 050f 	and.w	r5, r1, #15
 8000dcc:	429d      	cmp	r5, r3
{
 8000dce:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dd0:	d82b      	bhi.n	8000e2a <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8000dd2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000dd6:	f04f 031c 	mov.w	r3, #28
 8000dda:	d01d      	beq.n	8000e18 <HAL_PCD_EP_SetStall+0x54>
    ep->is_in = 1U;
 8000ddc:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dde:	436b      	muls	r3, r5
 8000de0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8000de4:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000de6:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8000dec:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dee:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8000df0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8000df2:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d019      	beq.n	8000e2e <HAL_PCD_EP_SetStall+0x6a>
 8000dfa:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000dfe:	6820      	ldr	r0, [r4, #0]
 8000e00:	f000 ff9c 	bl	8001d3c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e04:	b925      	cbnz	r5, 8000e10 <HAL_PCD_EP_SetStall+0x4c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e06:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8000e0a:	6820      	ldr	r0, [r4, #0]
 8000e0c:	f001 f856 	bl	8001ebc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000e16:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8000e18:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000e1a:	434b      	muls	r3, r1
 8000e1c:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8000e20:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000e22:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000e24:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 8000e28:	e7e0      	b.n	8000dec <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000e2e:	2002      	movs	r0, #2
}
 8000e30:	bd38      	pop	{r3, r4, r5, pc}

08000e32 <HAL_PCD_EP_ClrStall>:
{
 8000e32:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e34:	6843      	ldr	r3, [r0, #4]
 8000e36:	f001 020f 	and.w	r2, r1, #15
 8000e3a:	429a      	cmp	r2, r3
{
 8000e3c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e3e:	d825      	bhi.n	8000e8c <HAL_PCD_EP_ClrStall+0x5a>
 8000e40:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8000e42:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e46:	fb03 f302 	mul.w	r3, r3, r2
  if ((0x80U & ep_addr) == 0x80U)
 8000e4a:	d017      	beq.n	8000e7c <HAL_PCD_EP_ClrStall+0x4a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e4c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000e50:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000e52:	4403      	add	r3, r0
 8000e54:	2001      	movs	r0, #1
 8000e56:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  ep->is_stall = 0U;
 8000e5a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e5c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8000e5e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8000e60:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d013      	beq.n	8000e90 <HAL_PCD_EP_ClrStall+0x5e>
 8000e68:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000e6a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000e6c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000e70:	f000 ff90 	bl	8001d94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000e74:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000e78:	4628      	mov	r0, r5
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e7c:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
 8000e80:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000e82:	4403      	add	r3, r0
 8000e84:	2000      	movs	r0, #0
 8000e86:	f883 01fd 	strb.w	r0, [r3, #509]	; 0x1fd
 8000e8a:	e7e6      	b.n	8000e5a <HAL_PCD_EP_ClrStall+0x28>
    return HAL_ERROR;
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000e90:	2002      	movs	r0, #2
}
 8000e92:	bd38      	pop	{r3, r4, r5, pc}

08000e94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8000e94:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8000e96:	6804      	ldr	r4, [r0, #0]
 8000e98:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8000e9a:	b921      	cbnz	r1, 8000ea6 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8000e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ea0:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8000ea6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8000ea8:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8000eaa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	1c46      	adds	r6, r0, #1
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	4285      	cmp	r5, r0
 8000eb6:	d806      	bhi.n	8000ec6 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8000eb8:	313f      	adds	r1, #63	; 0x3f
 8000eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ebe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8000ec2:	6063      	str	r3, [r4, #4]
 8000ec4:	e7ed      	b.n	8000ea2 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8000ec6:	3040      	adds	r0, #64	; 0x40
 8000ec8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000ecc:	6840      	ldr	r0, [r0, #4]
 8000ece:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e7ec      	b.n	8000eb0 <HAL_PCDEx_SetTxFiFo+0x1c>

08000ed6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8000ed6:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8000ed8:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8000eda:	6259      	str	r1, [r3, #36]	; 0x24
}
 8000edc:	4770      	bx	lr
	...

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	b918      	cbnz	r0, 8000ef0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000eea:	b002      	add	sp, #8
 8000eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef0:	6803      	ldr	r3, [r0, #0]
 8000ef2:	07db      	lsls	r3, r3, #31
 8000ef4:	d414      	bmi.n	8000f20 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	079f      	lsls	r7, r3, #30
 8000efa:	d45f      	bmi.n	8000fbc <HAL_RCC_OscConfig+0xdc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	0719      	lsls	r1, r3, #28
 8000f00:	f100 8096 	bmi.w	8001030 <HAL_RCC_OscConfig+0x150>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	075a      	lsls	r2, r3, #29
 8000f08:	f100 80c0 	bmi.w	800108c <HAL_RCC_OscConfig+0x1ac>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8000f0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	f040 812e 	bne.w	8001170 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f14:	6a22      	ldr	r2, [r4, #32]
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	f040 8181 	bne.w	800121e <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7e4      	b.n	8000eea <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f20:	4d8e      	ldr	r5, [pc, #568]	; (800115c <HAL_RCC_OscConfig+0x27c>)
 8000f22:	686b      	ldr	r3, [r5, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d007      	beq.n	8000f3c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f2c:	686b      	ldr	r3, [r5, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d109      	bne.n	8000f4a <HAL_RCC_OscConfig+0x6a>
 8000f36:	686b      	ldr	r3, [r5, #4]
 8000f38:	03de      	lsls	r6, r3, #15
 8000f3a:	d506      	bpl.n	8000f4a <HAL_RCC_OscConfig+0x6a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	039d      	lsls	r5, r3, #14
 8000f40:	d5d9      	bpl.n	8000ef6 <HAL_RCC_OscConfig+0x16>
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1d6      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x16>
 8000f48:	e7ce      	b.n	8000ee8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	68a3      	ldr	r3, [r4, #8]
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d110      	bne.n	8000f74 <HAL_RCC_OscConfig+0x94>
 8000f52:	682b      	ldr	r3, [r5, #0]
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fb2d 	bl	80005b8 <HAL_GetTick>
 8000f5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	0398      	lsls	r0, r3, #14
 8000f64:	d4c7      	bmi.n	8000ef6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f66:	f7ff fb27 	bl	80005b8 <HAL_GetTick>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	2864      	cmp	r0, #100	; 0x64
 8000f6e:	d9f7      	bls.n	8000f60 <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 8000f70:	2003      	movs	r0, #3
 8000f72:	e7ba      	b.n	8000eea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f74:	b99b      	cbnz	r3, 8000f9e <HAL_RCC_OscConfig+0xbe>
 8000f76:	682b      	ldr	r3, [r5, #0]
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7c:	602b      	str	r3, [r5, #0]
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb17 	bl	80005b8 <HAL_GetTick>
 8000f8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	0399      	lsls	r1, r3, #14
 8000f90:	d5b1      	bpl.n	8000ef6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f92:	f7ff fb11 	bl	80005b8 <HAL_GetTick>
 8000f96:	1b80      	subs	r0, r0, r6
 8000f98:	2864      	cmp	r0, #100	; 0x64
 8000f9a:	d9f7      	bls.n	8000f8c <HAL_RCC_OscConfig+0xac>
 8000f9c:	e7e8      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	d103      	bne.n	8000fae <HAL_RCC_OscConfig+0xce>
 8000fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	e7d1      	b.n	8000f52 <HAL_RCC_OscConfig+0x72>
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	602b      	str	r3, [r5, #0]
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	e7cd      	b.n	8000f58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fbc:	4d67      	ldr	r5, [pc, #412]	; (800115c <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	686b      	ldr	r3, [r5, #4]
 8000fc0:	f013 0f0c 	tst.w	r3, #12
 8000fc4:	d007      	beq.n	8000fd6 <HAL_RCC_OscConfig+0xf6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fc6:	686b      	ldr	r3, [r5, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d110      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x112>
 8000fd0:	686b      	ldr	r3, [r5, #4]
 8000fd2:	03da      	lsls	r2, r3, #15
 8000fd4:	d40d      	bmi.n	8000ff2 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	079b      	lsls	r3, r3, #30
 8000fda:	d502      	bpl.n	8000fe2 <HAL_RCC_OscConfig+0x102>
 8000fdc:	6963      	ldr	r3, [r4, #20]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d182      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	69a2      	ldr	r2, [r4, #24]
 8000fe6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fee:	602b      	str	r3, [r5, #0]
 8000ff0:	e784      	b.n	8000efc <HAL_RCC_OscConfig+0x1c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff2:	6962      	ldr	r2, [r4, #20]
 8000ff4:	4b5a      	ldr	r3, [pc, #360]	; (8001160 <HAL_RCC_OscConfig+0x280>)
 8000ff6:	b16a      	cbz	r2, 8001014 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_ENABLE();
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fadc 	bl	80005b8 <HAL_GetTick>
 8001000:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	079f      	lsls	r7, r3, #30
 8001006:	d4ec      	bmi.n	8000fe2 <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fad6 	bl	80005b8 <HAL_GetTick>
 800100c:	1b80      	subs	r0, r0, r6
 800100e:	2802      	cmp	r0, #2
 8001010:	d9f7      	bls.n	8001002 <HAL_RCC_OscConfig+0x122>
 8001012:	e7ad      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 8001014:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001016:	f7ff facf 	bl	80005b8 <HAL_GetTick>
 800101a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	0798      	lsls	r0, r3, #30
 8001020:	f57f af6c 	bpl.w	8000efc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fac8 	bl	80005b8 <HAL_GetTick>
 8001028:	1b80      	subs	r0, r0, r6
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f6      	bls.n	800101c <HAL_RCC_OscConfig+0x13c>
 800102e:	e79f      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001030:	69e2      	ldr	r2, [r4, #28]
 8001032:	4d4a      	ldr	r5, [pc, #296]	; (800115c <HAL_RCC_OscConfig+0x27c>)
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <HAL_RCC_OscConfig+0x284>)
 8001036:	b1da      	cbz	r2, 8001070 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800103c:	f7ff fabc 	bl	80005b8 <HAL_GetTick>
 8001040:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001044:	079b      	lsls	r3, r3, #30
 8001046:	d50d      	bpl.n	8001064 <HAL_RCC_OscConfig+0x184>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001048:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	fbb3 f3f2 	udiv	r3, r3, r2
 8001054:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001056:	bf00      	nop
  }
  while (Delay --);
 8001058:	9b01      	ldr	r3, [sp, #4]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f9      	bne.n	8001056 <HAL_RCC_OscConfig+0x176>
 8001062:	e74f      	b.n	8000f04 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff faa8 	bl	80005b8 <HAL_GetTick>
 8001068:	1b80      	subs	r0, r0, r6
 800106a:	2802      	cmp	r0, #2
 800106c:	d9e9      	bls.n	8001042 <HAL_RCC_OscConfig+0x162>
 800106e:	e77f      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSI_DISABLE();
 8001070:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001072:	f7ff faa1 	bl	80005b8 <HAL_GetTick>
 8001076:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001078:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800107a:	079f      	lsls	r7, r3, #30
 800107c:	f57f af42 	bpl.w	8000f04 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fa9a 	bl	80005b8 <HAL_GetTick>
 8001084:	1b80      	subs	r0, r0, r6
 8001086:	2802      	cmp	r0, #2
 8001088:	d9f6      	bls.n	8001078 <HAL_RCC_OscConfig+0x198>
 800108a:	e771      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800108c:	4d33      	ldr	r5, [pc, #204]	; (800115c <HAL_RCC_OscConfig+0x27c>)
 800108e:	69eb      	ldr	r3, [r5, #28]
 8001090:	00de      	lsls	r6, r3, #3
 8001092:	d424      	bmi.n	80010de <HAL_RCC_OscConfig+0x1fe>
      pwrclkchanged = SET;
 8001094:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	69eb      	ldr	r3, [r5, #28]
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	61eb      	str	r3, [r5, #28]
 800109e:	69eb      	ldr	r3, [r5, #28]
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	4e30      	ldr	r6, [pc, #192]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 80010aa:	6833      	ldr	r3, [r6, #0]
 80010ac:	05d8      	lsls	r0, r3, #23
 80010ae:	d518      	bpl.n	80010e2 <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b0:	6923      	ldr	r3, [r4, #16]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d126      	bne.n	8001104 <HAL_RCC_OscConfig+0x224>
 80010b6:	6a2b      	ldr	r3, [r5, #32]
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80010be:	f7ff fa7b 	bl	80005b8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010c6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c8:	6a2b      	ldr	r3, [r5, #32]
 80010ca:	079a      	lsls	r2, r3, #30
 80010cc:	d53f      	bpl.n	800114e <HAL_RCC_OscConfig+0x26e>
    if (pwrclkchanged == SET)
 80010ce:	2f00      	cmp	r7, #0
 80010d0:	f43f af1c 	beq.w	8000f0c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d4:	69eb      	ldr	r3, [r5, #28]
 80010d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010da:	61eb      	str	r3, [r5, #28]
 80010dc:	e716      	b.n	8000f0c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80010de:	2700      	movs	r7, #0
 80010e0:	e7e2      	b.n	80010a8 <HAL_RCC_OscConfig+0x1c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e2:	6833      	ldr	r3, [r6, #0]
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010ea:	f7ff fa65 	bl	80005b8 <HAL_GetTick>
 80010ee:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	6833      	ldr	r3, [r6, #0]
 80010f2:	05d9      	lsls	r1, r3, #23
 80010f4:	d4dc      	bmi.n	80010b0 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f6:	f7ff fa5f 	bl	80005b8 <HAL_GetTick>
 80010fa:	eba0 0008 	sub.w	r0, r0, r8
 80010fe:	2864      	cmp	r0, #100	; 0x64
 8001100:	d9f6      	bls.n	80010f0 <HAL_RCC_OscConfig+0x210>
 8001102:	e735      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001104:	b9ab      	cbnz	r3, 8001132 <HAL_RCC_OscConfig+0x252>
 8001106:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001108:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	622b      	str	r3, [r5, #32]
 8001112:	6a2b      	ldr	r3, [r5, #32]
 8001114:	f023 0304 	bic.w	r3, r3, #4
 8001118:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800111a:	f7ff fa4d 	bl	80005b8 <HAL_GetTick>
 800111e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001120:	6a2b      	ldr	r3, [r5, #32]
 8001122:	079b      	lsls	r3, r3, #30
 8001124:	d5d3      	bpl.n	80010ce <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f7ff fa47 	bl	80005b8 <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	4540      	cmp	r0, r8
 800112e:	d9f7      	bls.n	8001120 <HAL_RCC_OscConfig+0x240>
 8001130:	e71e      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001132:	2b05      	cmp	r3, #5
 8001134:	6a2b      	ldr	r3, [r5, #32]
 8001136:	d103      	bne.n	8001140 <HAL_RCC_OscConfig+0x260>
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	622b      	str	r3, [r5, #32]
 800113e:	e7ba      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d6>
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	622b      	str	r3, [r5, #32]
 8001146:	6a2b      	ldr	r3, [r5, #32]
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	e7b6      	b.n	80010bc <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f7ff fa33 	bl	80005b8 <HAL_GetTick>
 8001152:	eba0 0008 	sub.w	r0, r0, r8
 8001156:	42b0      	cmp	r0, r6
 8001158:	d9b6      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1e8>
 800115a:	e709      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
 800115c:	40021000 	.word	0x40021000
 8001160:	42420000 	.word	0x42420000
 8001164:	42420480 	.word	0x42420480
 8001168:	20000118 	.word	0x20000118
 800116c:	40007000 	.word	0x40007000
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001170:	4d58      	ldr	r5, [pc, #352]	; (80012d4 <HAL_RCC_OscConfig+0x3f4>)
 8001172:	686b      	ldr	r3, [r5, #4]
 8001174:	03d8      	lsls	r0, r3, #15
 8001176:	d508      	bpl.n	800118a <HAL_RCC_OscConfig+0x2aa>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001178:	686b      	ldr	r3, [r5, #4]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800117e:	2b08      	cmp	r3, #8
 8001180:	d103      	bne.n	800118a <HAL_RCC_OscConfig+0x2aa>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001182:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001184:	03d9      	lsls	r1, r3, #15
 8001186:	f53f aeaf 	bmi.w	8000ee8 <HAL_RCC_OscConfig+0x8>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800118a:	2a02      	cmp	r2, #2
 800118c:	d133      	bne.n	80011f6 <HAL_RCC_OscConfig+0x316>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800118e:	682b      	ldr	r3, [r5, #0]
 8001190:	00da      	lsls	r2, r3, #3
 8001192:	d506      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x2c2>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001194:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001196:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800119c:	4293      	cmp	r3, r2
 800119e:	f47f aea3 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL2_DISABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	4e4c      	ldr	r6, [pc, #304]	; (80012d8 <HAL_RCC_OscConfig+0x3f8>)
 80011a6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80011a8:	f7ff fa06 	bl	80005b8 <HAL_GetTick>
 80011ac:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	d41a      	bmi.n	80011ea <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80011b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80011b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011bc:	4313      	orrs	r3, r2
 80011be:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80011c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80011c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011c8:	4313      	orrs	r3, r2
 80011ca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 80011cc:	2301      	movs	r3, #1
 80011ce:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80011d0:	f7ff f9f2 	bl	80005b8 <HAL_GetTick>
 80011d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	011f      	lsls	r7, r3, #4
 80011da:	f53f ae9b 	bmi.w	8000f14 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80011de:	f7ff f9eb 	bl	80005b8 <HAL_GetTick>
 80011e2:	1b80      	subs	r0, r0, r6
 80011e4:	2864      	cmp	r0, #100	; 0x64
 80011e6:	d9f6      	bls.n	80011d6 <HAL_RCC_OscConfig+0x2f6>
 80011e8:	e6c2      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80011ea:	f7ff f9e5 	bl	80005b8 <HAL_GetTick>
 80011ee:	1bc0      	subs	r0, r0, r7
 80011f0:	2864      	cmp	r0, #100	; 0x64
 80011f2:	d9dc      	bls.n	80011ae <HAL_RCC_OscConfig+0x2ce>
 80011f4:	e6bc      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL2_DISABLE();
 80011f6:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80011f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_RCC_OscConfig+0x3f8>)
 8001202:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001204:	f7ff f9d8 	bl	80005b8 <HAL_GetTick>
 8001208:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	0118      	lsls	r0, r3, #4
 800120e:	f57f ae81 	bpl.w	8000f14 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001212:	f7ff f9d1 	bl	80005b8 <HAL_GetTick>
 8001216:	1b80      	subs	r0, r0, r6
 8001218:	2864      	cmp	r0, #100	; 0x64
 800121a:	d9f6      	bls.n	800120a <HAL_RCC_OscConfig+0x32a>
 800121c:	e6a8      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_RCC_OscConfig+0x3f4>)
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	461d      	mov	r5, r3
 8001224:	f001 010c 	and.w	r1, r1, #12
 8001228:	2908      	cmp	r1, #8
 800122a:	d041      	beq.n	80012b0 <HAL_RCC_OscConfig+0x3d0>
 800122c:	2300      	movs	r3, #0
 800122e:	4e2b      	ldr	r6, [pc, #172]	; (80012dc <HAL_RCC_OscConfig+0x3fc>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001230:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001232:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001234:	d12f      	bne.n	8001296 <HAL_RCC_OscConfig+0x3b6>
        tickstart = HAL_GetTick();
 8001236:	f7ff f9bf 	bl	80005b8 <HAL_GetTick>
 800123a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	0199      	lsls	r1, r3, #6
 8001240:	d423      	bmi.n	800128a <HAL_RCC_OscConfig+0x3aa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d109      	bne.n	800125e <HAL_RCC_OscConfig+0x37e>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800124a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800124c:	6861      	ldr	r1, [r4, #4]
 800124e:	430a      	orrs	r2, r1
 8001250:	62ea      	str	r2, [r5, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001252:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001254:	68e1      	ldr	r1, [r4, #12]
 8001256:	f022 020f 	bic.w	r2, r2, #15
 800125a:	430a      	orrs	r2, r1
 800125c:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800125e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001260:	686a      	ldr	r2, [r5, #4]
 8001262:	430b      	orrs	r3, r1
 8001264:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001268:	4313      	orrs	r3, r2
 800126a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800126c:	2301      	movs	r3, #1
 800126e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001270:	f7ff f9a2 	bl	80005b8 <HAL_GetTick>
 8001274:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	019a      	lsls	r2, r3, #6
 800127a:	f53f ae4f 	bmi.w	8000f1c <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff f99b 	bl	80005b8 <HAL_GetTick>
 8001282:	1b00      	subs	r0, r0, r4
 8001284:	2802      	cmp	r0, #2
 8001286:	d9f6      	bls.n	8001276 <HAL_RCC_OscConfig+0x396>
 8001288:	e672      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff f995 	bl	80005b8 <HAL_GetTick>
 800128e:	1bc0      	subs	r0, r0, r7
 8001290:	2802      	cmp	r0, #2
 8001292:	d9d3      	bls.n	800123c <HAL_RCC_OscConfig+0x35c>
 8001294:	e66c      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
        tickstart = HAL_GetTick();
 8001296:	f7ff f98f 	bl	80005b8 <HAL_GetTick>
 800129a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	019b      	lsls	r3, r3, #6
 80012a0:	f57f ae3c 	bpl.w	8000f1c <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff f988 	bl	80005b8 <HAL_GetTick>
 80012a8:	1b00      	subs	r0, r0, r4
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d9f6      	bls.n	800129c <HAL_RCC_OscConfig+0x3bc>
 80012ae:	e65f      	b.n	8000f70 <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b0:	2a01      	cmp	r2, #1
 80012b2:	f43f ae19 	beq.w	8000ee8 <HAL_RCC_OscConfig+0x8>
        pll_config = RCC->CFGR;
 80012b6:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012ba:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80012be:	429a      	cmp	r2, r3
 80012c0:	f47f ae12 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x8>
 80012c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c6:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80012ca:	1ac0      	subs	r0, r0, r3
 80012cc:	bf18      	it	ne
 80012ce:	2001      	movne	r0, #1
 80012d0:	e60b      	b.n	8000eea <HAL_RCC_OscConfig+0xa>
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	42420068 	.word	0x42420068
 80012dc:	42420060 	.word	0x42420060

080012e0 <HAL_RCC_GetSysClockFreq>:
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80012e4:	466a      	mov	r2, sp
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012e8:	f103 0508 	add.w	r5, r3, #8
 80012ec:	4614      	mov	r4, r2
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	6859      	ldr	r1, [r3, #4]
 80012f2:	3308      	adds	r3, #8
 80012f4:	c403      	stmia	r4!, {r0, r1}
 80012f6:	42ab      	cmp	r3, r5
 80012f8:	4622      	mov	r2, r4
 80012fa:	d1f7      	bne.n	80012ec <HAL_RCC_GetSysClockFreq+0xc>
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	6020      	str	r0, [r4, #0]
 8001302:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001306:	ac04      	add	r4, sp, #16
 8001308:	f103 0510 	add.w	r5, r3, #16
 800130c:	4622      	mov	r2, r4
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	6859      	ldr	r1, [r3, #4]
 8001312:	3308      	adds	r3, #8
 8001314:	c203      	stmia	r2!, {r0, r1}
 8001316:	42ab      	cmp	r3, r5
 8001318:	4614      	mov	r4, r2
 800131a:	d1f7      	bne.n	800130c <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 800131c:	4920      	ldr	r1, [pc, #128]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800131e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001320:	f003 020c 	and.w	r2, r3, #12
 8001324:	2a04      	cmp	r2, #4
 8001326:	d035      	beq.n	8001394 <HAL_RCC_GetSysClockFreq+0xb4>
 8001328:	2a08      	cmp	r2, #8
 800132a:	d002      	beq.n	8001332 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSI_VALUE;
 800132c:	481d      	ldr	r0, [pc, #116]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xc4>)
}
 800132e:	b009      	add	sp, #36	; 0x24
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001332:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001336:	a808      	add	r0, sp, #32
 8001338:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800133a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800133c:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001340:	d525      	bpl.n	800138e <HAL_RCC_GetSysClockFreq+0xae>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001342:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	4403      	add	r3, r0
 800134a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800134e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001350:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001356:	d015      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0xa4>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001358:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800135a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800135c:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8001360:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001362:	fba4 4506 	umull	r4, r5, r4, r6
 8001366:	fba4 0103 	umull	r0, r1, r4, r3
 800136a:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800136e:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8001372:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001374:	fba3 2302 	umull	r2, r3, r3, r2
 8001378:	f7fe ff54 	bl	8000224 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800137c:	2e0d      	cmp	r6, #13
 800137e:	d1d6      	bne.n	800132e <HAL_RCC_GetSysClockFreq+0x4e>
          pllclk = pllclk / 2;
 8001380:	0840      	lsrs	r0, r0, #1
 8001382:	e7d4      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x4e>
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001384:	fb03 f006 	mul.w	r0, r3, r6
 8001388:	fbb0 f0f2 	udiv	r0, r0, r2
 800138c:	e7f6      	b.n	800137c <HAL_RCC_GetSysClockFreq+0x9c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8001390:	4370      	muls	r0, r6
 8001392:	e7cc      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc8>)
  return sysclockfreq;
 8001396:	e7ca      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x4e>
 8001398:	08002f44 	.word	0x08002f44
 800139c:	08002f52 	.word	0x08002f52
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	017d7840 	.word	0x017d7840
 80013ac:	003d0900 	.word	0x003d0900

080013b0 <HAL_RCC_ClockConfig>:
{
 80013b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80013b6:	4604      	mov	r4, r0
 80013b8:	b910      	cbnz	r0, 80013c0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4a45      	ldr	r2, [pc, #276]	; (80014d8 <HAL_RCC_ClockConfig+0x128>)
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	428b      	cmp	r3, r1
 80013ca:	d329      	bcc.n	8001420 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	6821      	ldr	r1, [r4, #0]
 80013ce:	078e      	lsls	r6, r1, #30
 80013d0:	d431      	bmi.n	8001436 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	07ca      	lsls	r2, r1, #31
 80013d4:	d444      	bmi.n	8001460 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <HAL_RCC_ClockConfig+0x128>)
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	429d      	cmp	r5, r3
 80013e0:	d367      	bcc.n	80014b2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	4d3d      	ldr	r5, [pc, #244]	; (80014dc <HAL_RCC_ClockConfig+0x12c>)
 80013e6:	f012 0f04 	tst.w	r2, #4
 80013ea:	d16e      	bne.n	80014ca <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ec:	0713      	lsls	r3, r2, #28
 80013ee:	d506      	bpl.n	80013fe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013f0:	686b      	ldr	r3, [r5, #4]
 80013f2:	6922      	ldr	r2, [r4, #16]
 80013f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013fc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fe:	f7ff ff6f 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 8001402:	686b      	ldr	r3, [r5, #4]
 8001404:	4a36      	ldr	r2, [pc, #216]	; (80014e0 <HAL_RCC_ClockConfig+0x130>)
 8001406:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	40d8      	lsrs	r0, r3
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_RCC_ClockConfig+0x134>)
 8001410:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <HAL_RCC_ClockConfig+0x138>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f7ff f88d 	bl	8000534 <HAL_InitTick>
  return HAL_OK;
 800141a:	2000      	movs	r0, #0
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	f023 0307 	bic.w	r3, r3, #7
 8001426:	430b      	orrs	r3, r1
 8001428:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	4299      	cmp	r1, r3
 8001432:	d1c2      	bne.n	80013ba <HAL_RCC_ClockConfig+0xa>
 8001434:	e7ca      	b.n	80013cc <HAL_RCC_ClockConfig+0x1c>
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	bf1e      	ittt	ne
 800143e:	685a      	ldrne	r2, [r3, #4]
 8001440:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001444:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001446:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001448:	bf42      	ittt	mi
 800144a:	685a      	ldrmi	r2, [r3, #4]
 800144c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001450:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	68a0      	ldr	r0, [r4, #8]
 8001456:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800145a:	4302      	orrs	r2, r0
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	e7b8      	b.n	80013d2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001460:	6862      	ldr	r2, [r4, #4]
 8001462:	4e1e      	ldr	r6, [pc, #120]	; (80014dc <HAL_RCC_ClockConfig+0x12c>)
 8001464:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001468:	d11b      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	d0a4      	beq.n	80013ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001470:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001472:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	4313      	orrs	r3, r2
 800147c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800147e:	f7ff f89b 	bl	80005b8 <HAL_GetTick>
 8001482:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001484:	6873      	ldr	r3, [r6, #4]
 8001486:	6862      	ldr	r2, [r4, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001490:	d0a1      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7ff f891 	bl	80005b8 <HAL_GetTick>
 8001496:	1bc0      	subs	r0, r0, r7
 8001498:	4540      	cmp	r0, r8
 800149a:	d9f3      	bls.n	8001484 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800149c:	2003      	movs	r0, #3
}
 800149e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a2:	2a02      	cmp	r2, #2
 80014a4:	d102      	bne.n	80014ac <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014aa:	e7e0      	b.n	800146e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	f013 0f02 	tst.w	r3, #2
 80014b0:	e7dd      	b.n	800146e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	6813      	ldr	r3, [r2, #0]
 80014b4:	f023 0307 	bic.w	r3, r3, #7
 80014b8:	432b      	orrs	r3, r5
 80014ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	429d      	cmp	r5, r3
 80014c4:	f47f af79 	bne.w	80013ba <HAL_RCC_ClockConfig+0xa>
 80014c8:	e78b      	b.n	80013e2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ca:	686b      	ldr	r3, [r5, #4]
 80014cc:	68e1      	ldr	r1, [r4, #12]
 80014ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d2:	430b      	orrs	r3, r1
 80014d4:	606b      	str	r3, [r5, #4]
 80014d6:	e789      	b.n	80013ec <HAL_RCC_ClockConfig+0x3c>
 80014d8:	40022000 	.word	0x40022000
 80014dc:	40021000 	.word	0x40021000
 80014e0:	08002f62 	.word	0x08002f62
 80014e4:	20000118 	.word	0x20000118
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_RCC_GetHCLKFreq>:
}
 80014ec:	4b01      	ldr	r3, [pc, #4]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000118 	.word	0x20000118

080014f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014f8:	6803      	ldr	r3, [r0, #0]
{
 80014fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014fe:	f013 0f01 	tst.w	r3, #1
{
 8001502:	4605      	mov	r5, r0
 8001504:	4c57      	ldr	r4, [pc, #348]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001506:	d01f      	beq.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001508:	69e3      	ldr	r3, [r4, #28]
 800150a:	00da      	lsls	r2, r3, #3
 800150c:	d447      	bmi.n	800159e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800150e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001510:	69e3      	ldr	r3, [r4, #28]
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	61e3      	str	r3, [r4, #28]
 8001518:	69e3      	ldr	r3, [r4, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4e51      	ldr	r6, [pc, #324]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	05db      	lsls	r3, r3, #23
 8001528:	d53b      	bpl.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800152a:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800152c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001530:	d14b      	bne.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001532:	6a23      	ldr	r3, [r4, #32]
 8001534:	686a      	ldr	r2, [r5, #4]
 8001536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800153a:	4313      	orrs	r3, r2
 800153c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153e:	b11f      	cbz	r7, 8001548 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	69e3      	ldr	r3, [r4, #28]
 8001542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001546:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001548:	682a      	ldr	r2, [r5, #0]
 800154a:	0793      	lsls	r3, r2, #30
 800154c:	d505      	bpl.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800154e:	6863      	ldr	r3, [r4, #4]
 8001550:	68a9      	ldr	r1, [r5, #8]
 8001552:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001556:	430b      	orrs	r3, r1
 8001558:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800155a:	0757      	lsls	r7, r2, #29
 800155c:	d505      	bpl.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800155e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001560:	68e9      	ldr	r1, [r5, #12]
 8001562:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001566:	430b      	orrs	r3, r1
 8001568:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800156a:	0716      	lsls	r6, r2, #28
 800156c:	d505      	bpl.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800156e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001570:	692a      	ldr	r2, [r5, #16]
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	4313      	orrs	r3, r2
 8001578:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800157a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800157c:	0398      	lsls	r0, r3, #14
 800157e:	d466      	bmi.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001580:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001582:	0359      	lsls	r1, r3, #13
 8001584:	d463      	bmi.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001586:	6828      	ldr	r0, [r5, #0]
 8001588:	f010 0010 	ands.w	r0, r0, #16
 800158c:	d01a      	beq.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	69ea      	ldr	r2, [r5, #28]
 8001592:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001596:	4313      	orrs	r3, r2
 8001598:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800159a:	2000      	movs	r0, #0
 800159c:	e012      	b.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2700      	movs	r7, #0
 80015a0:	e7bf      	b.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a2:	6833      	ldr	r3, [r6, #0]
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80015aa:	f7ff f805 	bl	80005b8 <HAL_GetTick>
 80015ae:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	6833      	ldr	r3, [r6, #0]
 80015b2:	05d8      	lsls	r0, r3, #23
 80015b4:	d4b9      	bmi.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b6:	f7fe ffff 	bl	80005b8 <HAL_GetTick>
 80015ba:	eba0 0008 	sub.w	r0, r0, r8
 80015be:	2864      	cmp	r0, #100	; 0x64
 80015c0:	d9f6      	bls.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 80015c2:	2003      	movs	r0, #3
}
 80015c4:	b002      	add	sp, #8
 80015c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015ca:	686a      	ldr	r2, [r5, #4]
 80015cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d0ae      	beq.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80015d4:	2001      	movs	r0, #1
 80015d6:	4a25      	ldr	r2, [pc, #148]	; (800166c <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015d8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80015da:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015dc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015e2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80015e4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015e6:	07d9      	lsls	r1, r3, #31
 80015e8:	d5a3      	bpl.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80015ea:	f7fe ffe5 	bl	80005b8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	6a23      	ldr	r3, [r4, #32]
 80015f6:	079a      	lsls	r2, r3, #30
 80015f8:	d49b      	bmi.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7fe ffdd 	bl	80005b8 <HAL_GetTick>
 80015fe:	1b80      	subs	r0, r0, r6
 8001600:	4540      	cmp	r0, r8
 8001602:	d9f7      	bls.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001604:	e7dd      	b.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	69a9      	ldr	r1, [r5, #24]
 800160a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800160e:	d004      	beq.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x122>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8001610:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001612:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8001616:	428a      	cmp	r2, r1
 8001618:	d122      	bne.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800161a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800161c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001620:	430b      	orrs	r3, r1
 8001622:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001626:	696a      	ldr	r2, [r5, #20]
 8001628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800162c:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 800162e:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001630:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001634:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001636:	f7fe ffbf 	bl	80005b8 <HAL_GetTick>
 800163a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	009a      	lsls	r2, r3, #2
 8001640:	d4a1      	bmi.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001642:	f7fe ffb9 	bl	80005b8 <HAL_GetTick>
 8001646:	1b80      	subs	r0, r0, r6
 8001648:	2864      	cmp	r0, #100	; 0x64
 800164a:	d9f7      	bls.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x144>
 800164c:	e7b9      	b.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	d5d8      	bpl.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8001654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001656:	696a      	ldr	r2, [r5, #20]
 8001658:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800165c:	4293      	cmp	r3, r2
 800165e:	d092      	beq.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
 8001662:	e7af      	b.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
 800166c:	42420440 	.word	0x42420440
 8001670:	42420070 	.word	0x42420070

08001674 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001676:	3b01      	subs	r3, #1
 8001678:	d101      	bne.n	800167e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800167a:	2003      	movs	r0, #3
 800167c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800167e:	6902      	ldr	r2, [r0, #16]
 8001680:	2a00      	cmp	r2, #0
 8001682:	daf8      	bge.n	8001676 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001684:	6903      	ldr	r3, [r0, #16]
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <USB_CoreReset+0x2c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800168e:	3a01      	subs	r2, #1
 8001690:	d0f3      	beq.n	800167a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001692:	6903      	ldr	r3, [r0, #16]
 8001694:	f013 0301 	ands.w	r3, r3, #1
 8001698:	d1f9      	bne.n	800168e <USB_CoreReset+0x1a>

  return HAL_OK;
 800169a:	4618      	mov	r0, r3
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	00030d41 	.word	0x00030d41

080016a4 <USB_CoreInit>:
{
 80016a4:	b084      	sub	sp, #16
 80016a6:	b538      	push	{r3, r4, r5, lr}
 80016a8:	ad05      	add	r5, sp, #20
 80016aa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80016ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 80016b0:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d119      	bne.n	80016ea <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80016b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80016b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016bc:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80016be:	68c3      	ldr	r3, [r0, #12]
 80016c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80016c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016c8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80016ca:	68c3      	ldr	r3, [r0, #12]
 80016cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80016d0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80016d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80016d4:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80016d6:	bf02      	ittt	eq
 80016d8:	68c3      	ldreq	r3, [r0, #12]
 80016da:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80016de:	60c3      	streq	r3, [r0, #12]
}
 80016e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016e4:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 80016e6:	f7ff bfc5 	b.w	8001674 <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80016ea:	68c3      	ldr	r3, [r0, #12]
 80016ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f0:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80016f2:	f7ff ffbf 	bl	8001674 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80016fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001702:	b004      	add	sp, #16
 8001704:	4770      	bx	lr
	...

08001708 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8001708:	2a02      	cmp	r2, #2
 800170a:	d158      	bne.n	80017be <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <USB_SetTurnaroundTime+0xc0>)
 800170e:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <USB_SetTurnaroundTime+0xc4>)
 8001710:	440b      	add	r3, r1
 8001712:	4293      	cmp	r3, r2
 8001714:	d947      	bls.n	80017a6 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <USB_SetTurnaroundTime+0xc8>)
 8001718:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <USB_SetTurnaroundTime+0xcc>)
 800171a:	440b      	add	r3, r1
 800171c:	4293      	cmp	r3, r2
 800171e:	d944      	bls.n	80017aa <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8001720:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8001724:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <USB_SetTurnaroundTime+0xd0>)
 8001726:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800172a:	4293      	cmp	r3, r2
 800172c:	d93f      	bls.n	80017ae <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800172e:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8001732:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001736:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800173a:	32a0      	adds	r2, #160	; 0xa0
 800173c:	4293      	cmp	r3, r2
 800173e:	d938      	bls.n	80017b2 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <USB_SetTurnaroundTime+0xd4>)
 8001742:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <USB_SetTurnaroundTime+0xd8>)
 8001744:	440b      	add	r3, r1
 8001746:	4293      	cmp	r3, r2
 8001748:	d935      	bls.n	80017b6 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <USB_SetTurnaroundTime+0xdc>)
 800174c:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8001750:	440b      	add	r3, r1
 8001752:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8001756:	4293      	cmp	r3, r2
 8001758:	d92f      	bls.n	80017ba <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <USB_SetTurnaroundTime+0xe0>)
 800175c:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8001760:	440b      	add	r3, r1
 8001762:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8001766:	4293      	cmp	r3, r2
 8001768:	d929      	bls.n	80017be <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800176a:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800176e:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8001772:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8001776:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800177a:	4293      	cmp	r3, r2
 800177c:	d921      	bls.n	80017c2 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 8001780:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001784:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8001786:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800178a:	4293      	cmp	r3, r2
 800178c:	bf94      	ite	ls
 800178e:	2307      	movls	r3, #7
 8001790:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001792:	68c2      	ldr	r2, [r0, #12]
 8001794:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001798:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800179a:	68c2      	ldr	r2, [r0, #12]
 800179c:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 80017a0:	60c3      	str	r3, [r0, #12]
}
 80017a2:	2000      	movs	r0, #0
 80017a4:	4770      	bx	lr
      UsbTrd = 0xFU;
 80017a6:	230f      	movs	r3, #15
 80017a8:	e7f3      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 80017aa:	230e      	movs	r3, #14
 80017ac:	e7f1      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 80017ae:	230d      	movs	r3, #13
 80017b0:	e7ef      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 80017b2:	230c      	movs	r3, #12
 80017b4:	e7ed      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 80017b6:	230b      	movs	r3, #11
 80017b8:	e7eb      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 80017ba:	230a      	movs	r3, #10
 80017bc:	e7e9      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80017be:	2309      	movs	r3, #9
 80017c0:	e7e7      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 80017c2:	2308      	movs	r3, #8
 80017c4:	e7e5      	b.n	8001792 <USB_SetTurnaroundTime+0x8a>
 80017c6:	bf00      	nop
 80017c8:	ff275340 	.word	0xff275340
 80017cc:	000c34ff 	.word	0x000c34ff
 80017d0:	ff1b1e40 	.word	0xff1b1e40
 80017d4:	000f423f 	.word	0x000f423f
 80017d8:	00124f7f 	.word	0x00124f7f
 80017dc:	fee5b660 	.word	0xfee5b660
 80017e0:	0016e35f 	.word	0x0016e35f
 80017e4:	feced300 	.word	0xfeced300
 80017e8:	feb35bc0 	.word	0xfeb35bc0
 80017ec:	fe5954e0 	.word	0xfe5954e0

080017f0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80017f0:	6883      	ldr	r3, [r0, #8]
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6083      	str	r3, [r0, #8]
}
 80017f8:	2000      	movs	r0, #0
 80017fa:	4770      	bx	lr

080017fc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80017fc:	6883      	ldr	r3, [r0, #8]
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6083      	str	r3, [r0, #8]
}
 8001804:	2000      	movs	r0, #0
 8001806:	4770      	bx	lr

08001808 <USB_SetCurrentMode>:
{
 8001808:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800180a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800180c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800180e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001812:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001814:	d108      	bne.n	8001828 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001816:	68c3      	ldr	r3, [r0, #12]
 8001818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800181c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f7fe fed0 	bl	80005c4 <HAL_Delay>
  return HAL_OK;
 8001824:	2000      	movs	r0, #0
 8001826:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001828:	b919      	cbnz	r1, 8001832 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800182a:	68c3      	ldr	r3, [r0, #12]
 800182c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001830:	e7f4      	b.n	800181c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
}
 8001834:	bd08      	pop	{r3, pc}
	...

08001838 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001838:	0189      	lsls	r1, r1, #6
 800183a:	f041 0120 	orr.w	r1, r1, #32
 800183e:	4a06      	ldr	r2, [pc, #24]	; (8001858 <USB_FlushTxFifo+0x20>)
 8001840:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8001842:	3a01      	subs	r2, #1
 8001844:	d005      	beq.n	8001852 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001846:	6903      	ldr	r3, [r0, #16]
 8001848:	f013 0320 	ands.w	r3, r3, #32
 800184c:	d1f9      	bne.n	8001842 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800184e:	4618      	mov	r0, r3
 8001850:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001852:	2003      	movs	r0, #3
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	00030d41 	.word	0x00030d41

0800185c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800185c:	2310      	movs	r3, #16
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <USB_FlushRxFifo+0x1c>)
 8001860:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8001862:	3a01      	subs	r2, #1
 8001864:	d005      	beq.n	8001872 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001866:	6903      	ldr	r3, [r0, #16]
 8001868:	f013 0310 	ands.w	r3, r3, #16
 800186c:	d1f9      	bne.n	8001862 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800186e:	4618      	mov	r0, r3
 8001870:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001872:	2003      	movs	r0, #3
}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	00030d41 	.word	0x00030d41

0800187c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800187c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001880:	4319      	orrs	r1, r3
 8001882:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001886:	2000      	movs	r0, #0
 8001888:	4770      	bx	lr
	...

0800188c <USB_DevInit>:
{
 800188c:	b084      	sub	sp, #16
 800188e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	a807      	add	r0, sp, #28
 8001896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800189a:	2300      	movs	r3, #0
 800189c:	460e      	mov	r6, r1
    USBx->DIEPTXF[i] = 0U;
 800189e:	4619      	mov	r1, r3
 80018a0:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80018a4:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80018a6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80018aa:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80018ac:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80018ae:	d1f7      	bne.n	80018a0 <USB_DevInit+0x14>
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80018b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80018b2:	4620      	mov	r0, r4
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80018b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018b8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80018ba:	f8c4 1e00 	str.w	r1, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018be:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80018c2:	2103      	movs	r1, #3
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018c4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80018c8:	f7ff ffd8 	bl	800187c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80018cc:	2110      	movs	r1, #16
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff ffb2 	bl	8001838 <USB_FlushTxFifo>
 80018d4:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80018d6:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018d8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80018dc:	f7ff ffbe 	bl	800185c <USB_FlushRxFifo>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d141      	bne.n	8001968 <USB_DevInit+0xdc>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80018e4:	1c08      	adds	r0, r1, #0
 80018e6:	bf18      	it	ne
 80018e8:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80018ea:	2300      	movs	r3, #0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80018ec:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80018f0:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80018f2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80018f6:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 80018fa:	612b      	str	r3, [r5, #16]
 80018fc:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001900:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001902:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001904:	42b3      	cmp	r3, r6
 8001906:	d131      	bne.n	800196c <USB_DevInit+0xe0>
 8001908:	2100      	movs	r1, #0
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800190a:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800190e:	460e      	mov	r6, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001910:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001914:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
 8001918:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800191c:	428b      	cmp	r3, r1
 800191e:	d137      	bne.n	8001990 <USB_DevInit+0x104>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001920:	692b      	ldr	r3, [r5, #16]
 8001922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001926:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800192c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001930:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001932:	69a3      	ldr	r3, [r4, #24]
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800193a:	69a2      	ldr	r2, [r4, #24]
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <USB_DevInit+0x128>)
 800193e:	4313      	orrs	r3, r2
 8001940:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8001942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001944:	b11b      	cbz	r3, 800194e <USB_DevInit+0xc2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001946:	69a3      	ldr	r3, [r4, #24]
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800194e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001950:	2b01      	cmp	r3, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001952:	bf01      	itttt	eq
 8001954:	69a3      	ldreq	r3, [r4, #24]
 8001956:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800195a:	f043 0304 	orreq.w	r3, r3, #4
 800195e:	61a3      	streq	r3, [r4, #24]
}
 8001960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001964:	b004      	add	sp, #16
 8001966:	4770      	bx	lr
 8001968:	2001      	movs	r0, #1
 800196a:	e7be      	b.n	80018ea <USB_DevInit+0x5e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800196c:	f8d2 8000 	ldr.w	r8, [r2]
 8001970:	f1b8 0f00 	cmp.w	r8, #0
 8001974:	da0a      	bge.n	800198c <USB_DevInit+0x100>
      if (i == 0U)
 8001976:	b93b      	cbnz	r3, 8001988 <USB_DevInit+0xfc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001978:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800197c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800197e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001980:	f8c2 c008 	str.w	ip, [r2, #8]
 8001984:	3220      	adds	r2, #32
 8001986:	e7bd      	b.n	8001904 <USB_DevInit+0x78>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001988:	6017      	str	r7, [r2, #0]
 800198a:	e7f7      	b.n	800197c <USB_DevInit+0xf0>
      USBx_INEP(i)->DIEPCTL = 0U;
 800198c:	6011      	str	r1, [r2, #0]
 800198e:	e7f5      	b.n	800197c <USB_DevInit+0xf0>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001990:	f8d2 8000 	ldr.w	r8, [r2]
 8001994:	f1b8 0f00 	cmp.w	r8, #0
 8001998:	da0a      	bge.n	80019b0 <USB_DevInit+0x124>
      if (i == 0U)
 800199a:	b939      	cbnz	r1, 80019ac <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800199c:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80019a0:	6116      	str	r6, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019a2:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80019a4:	f8c2 c008 	str.w	ip, [r2, #8]
 80019a8:	3220      	adds	r2, #32
 80019aa:	e7b7      	b.n	800191c <USB_DevInit+0x90>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80019ac:	6017      	str	r7, [r2, #0]
 80019ae:	e7f7      	b.n	80019a0 <USB_DevInit+0x114>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80019b0:	6016      	str	r6, [r2, #0]
 80019b2:	e7f5      	b.n	80019a0 <USB_DevInit+0x114>
 80019b4:	803c3800 	.word	0x803c3800

080019b8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80019b8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80019bc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80019c0:	f013 0f02 	tst.w	r3, #2
}
 80019c4:	bf14      	ite	ne
 80019c6:	2002      	movne	r0, #2
 80019c8:	200f      	moveq	r0, #15
 80019ca:	4770      	bx	lr

080019cc <USB_ActivateEndpoint>:
{
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80019ce:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80019d0:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 80019d2:	2c01      	cmp	r4, #1
 80019d4:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 80019d8:	f006 030f 	and.w	r3, r6, #15
 80019dc:	ea4f 1246 	mov.w	r2, r6, lsl #5
 80019e0:	d11b      	bne.n	8001a1a <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80019e2:	69ef      	ldr	r7, [r5, #28]
 80019e4:	409c      	lsls	r4, r3
 80019e6:	433c      	orrs	r4, r7
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80019e8:	4410      	add	r0, r2
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80019ea:	61ec      	str	r4, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80019ec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	d410      	bmi.n	8001a16 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80019f4:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80019f6:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80019f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a04:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8001a08:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001a0c:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 8001a10:	4313      	orrs	r3, r2
 8001a12:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8001a16:	2000      	movs	r0, #0
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001a1a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8001a1e:	69ee      	ldr	r6, [r5, #28]
 8001a20:	409c      	lsls	r4, r3
 8001a22:	4334      	orrs	r4, r6
 8001a24:	61ec      	str	r4, [r5, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001a26:	4410      	add	r0, r2
 8001a28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	d4f2      	bmi.n	8001a16 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001a30:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8001a32:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8001a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a44:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8001a4e:	e7e2      	b.n	8001a16 <USB_ActivateEndpoint+0x4a>

08001a50 <USB_DeactivateEndpoint>:
{
 8001a50:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8001a52:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001a54:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 8001a5c:	f002 050f 	and.w	r5, r2, #15
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001a60:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001a62:	ea4f 1242 	mov.w	r2, r2, lsl #5
  if (ep->is_in == 1U)
 8001a66:	d10f      	bne.n	8001a88 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001a68:	40ab      	lsls	r3, r5
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	401c      	ands	r4, r3
 8001a6e:	63cc      	str	r4, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001a70:	69cc      	ldr	r4, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001a72:	4402      	add	r2, r0
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001a74:	4023      	ands	r3, r4
 8001a76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001a78:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <USB_DeactivateEndpoint+0x5c>)
 8001a7e:	400b      	ands	r3, r1
 8001a80:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
}
 8001a84:	2000      	movs	r0, #0
 8001a86:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a8c:	40ab      	lsls	r3, r5
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	401c      	ands	r4, r3
 8001a92:	63cc      	str	r4, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001a94:	69cc      	ldr	r4, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001a96:	4402      	add	r2, r0
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001a98:	4023      	ands	r3, r4
 8001a9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001a9c:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <USB_DeactivateEndpoint+0x60>)
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001aa8:	e7ec      	b.n	8001a84 <USB_DeactivateEndpoint+0x34>
 8001aaa:	bf00      	nop
 8001aac:	ec337800 	.word	0xec337800
 8001ab0:	eff37800 	.word	0xeff37800

08001ab4 <USB_EP0StartXfer>:
{
 8001ab4:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8001ab6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001ab8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	694d      	ldr	r5, [r1, #20]
 8001abe:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001ac2:	4e33      	ldr	r6, [pc, #204]	; (8001b90 <USB_EP0StartXfer+0xdc>)
 8001ac4:	d144      	bne.n	8001b50 <USB_EP0StartXfer+0x9c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001ac6:	1883      	adds	r3, r0, r2
    if (ep->xfer_len == 0U)
 8001ac8:	bb45      	cbnz	r5, 8001b1c <USB_EP0StartXfer+0x68>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001aca:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8001ace:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001ad2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001ad6:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001ada:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8001ade:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001ae2:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001ae6:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8001aea:	4026      	ands	r6, r4
 8001aec:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001af0:	4402      	add	r2, r0
 8001af2:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8001af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001afa:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8001afe:	694b      	ldr	r3, [r1, #20]
 8001b00:	b153      	cbz	r3, 8001b18 <USB_EP0StartXfer+0x64>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001b02:	780b      	ldrb	r3, [r1, #0]
 8001b04:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8001b08:	f003 010f 	and.w	r1, r3, #15
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f8d0 0834 	ldr.w	r0, [r0, #2100]	; 0x834
 8001b12:	408b      	lsls	r3, r1
 8001b14:	4303      	orrs	r3, r0
 8001b16:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001b18:	2000      	movs	r0, #0
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b20:	691c      	ldr	r4, [r3, #16]
 8001b22:	4026      	ands	r6, r4
 8001b24:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001b26:	691c      	ldr	r4, [r3, #16]
 8001b28:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001b2c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001b30:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8001b32:	688c      	ldr	r4, [r1, #8]
 8001b34:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001b36:	bf88      	it	hi
 8001b38:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001b3a:	691c      	ldr	r4, [r3, #16]
 8001b3c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b40:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001b42:	694c      	ldr	r4, [r1, #20]
 8001b44:	691d      	ldr	r5, [r3, #16]
 8001b46:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001b4a:	432c      	orrs	r4, r5
 8001b4c:	611c      	str	r4, [r3, #16]
 8001b4e:	e7cf      	b.n	8001af0 <USB_EP0StartXfer+0x3c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8001b50:	4402      	add	r2, r0
 8001b52:	f502 6330 	add.w	r3, r2, #2816	; 0xb00
 8001b56:	6918      	ldr	r0, [r3, #16]
 8001b58:	4030      	ands	r0, r6
 8001b5a:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8001b5c:	6918      	ldr	r0, [r3, #16]
 8001b5e:	f020 50ff 	bic.w	r0, r0, #534773760	; 0x1fe00000
 8001b62:	f420 10c0 	bic.w	r0, r0, #1572864	; 0x180000
 8001b66:	6118      	str	r0, [r3, #16]
 8001b68:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 8001b6a:	b105      	cbz	r5, 8001b6e <USB_EP0StartXfer+0xba>
      ep->xfer_len = ep->maxpacket;
 8001b6c:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001b6e:	6919      	ldr	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001b70:	f3c0 0012 	ubfx	r0, r0, #0, #19
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001b74:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8001b78:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001b7a:	6919      	ldr	r1, [r3, #16]
 8001b7c:	4308      	orrs	r0, r1
 8001b7e:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001b80:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001b84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001b88:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001b8c:	e7c4      	b.n	8001b18 <USB_EP0StartXfer+0x64>
 8001b8e:	bf00      	nop
 8001b90:	fff80000 	.word	0xfff80000

08001b94 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8001b94:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001b96:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba2:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8001ba4:	4299      	cmp	r1, r3
 8001ba6:	d101      	bne.n	8001bac <USB_WritePacket+0x18>
}
 8001ba8:	2000      	movs	r0, #0
 8001baa:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001bac:	f851 0b04 	ldr.w	r0, [r1], #4
 8001bb0:	6010      	str	r0, [r2, #0]
 8001bb2:	e7f7      	b.n	8001ba4 <USB_WritePacket+0x10>

08001bb4 <USB_EPStartXfer>:
{
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8001bb6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001bb8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001bc0:	694b      	ldr	r3, [r1, #20]
 8001bc2:	4f55      	ldr	r7, [pc, #340]	; (8001d18 <USB_EPStartXfer+0x164>)
 8001bc4:	d169      	bne.n	8001c9a <USB_EPStartXfer+0xe6>
    if (ep->xfer_len == 0U)
 8001bc6:	bb53      	cbnz	r3, 8001c1e <USB_EPStartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001bc8:	1884      	adds	r4, r0, r2
 8001bca:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8001bce:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001bd2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001bd6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001bda:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8001bde:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8001be2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001be6:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8001bea:	402f      	ands	r7, r5
 8001bec:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001bf0:	4402      	add	r2, r0
 8001bf2:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8001bf6:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001bfa:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8001bfe:	78cc      	ldrb	r4, [r1, #3]
 8001c00:	2c01      	cmp	r4, #1
 8001c02:	d037      	beq.n	8001c74 <USB_EPStartXfer+0xc0>
      if (ep->xfer_len > 0U)
 8001c04:	b14b      	cbz	r3, 8001c1a <USB_EPStartXfer+0x66>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001c06:	780b      	ldrb	r3, [r1, #0]
 8001c08:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	2301      	movs	r3, #1
 8001c12:	4093      	lsls	r3, r2
 8001c14:	4323      	orrs	r3, r4
 8001c16:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001c1e:	1886      	adds	r6, r0, r2
 8001c20:	f8d6 4910 	ldr.w	r4, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8001c24:	688d      	ldr	r5, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001c26:	403c      	ands	r4, r7
 8001c28:	f8c6 4910 	str.w	r4, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001c2c:	f8d6 4910 	ldr.w	r4, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001c30:	f506 6610 	add.w	r6, r6, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001c34:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001c38:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001c3c:	6134      	str	r4, [r6, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8001c3e:	195c      	adds	r4, r3, r5
 8001c40:	3c01      	subs	r4, #1
 8001c42:	fbb4 f5f5 	udiv	r5, r4, r5
 8001c46:	4c35      	ldr	r4, [pc, #212]	; (8001d1c <USB_EPStartXfer+0x168>)
 8001c48:	6937      	ldr	r7, [r6, #16]
 8001c4a:	ea04 44c5 	and.w	r4, r4, r5, lsl #19
 8001c4e:	433c      	orrs	r4, r7
 8001c50:	6134      	str	r4, [r6, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001c52:	6935      	ldr	r5, [r6, #16]
 8001c54:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8001c58:	432c      	orrs	r4, r5
 8001c5a:	6134      	str	r4, [r6, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001c5c:	78cc      	ldrb	r4, [r1, #3]
 8001c5e:	2c01      	cmp	r4, #1
 8001c60:	d1c6      	bne.n	8001bf0 <USB_EPStartXfer+0x3c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8001c62:	6934      	ldr	r4, [r6, #16]
 8001c64:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8001c68:	6134      	str	r4, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8001c6a:	6934      	ldr	r4, [r6, #16]
 8001c6c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8001c70:	6134      	str	r4, [r6, #16]
 8001c72:	e7bd      	b.n	8001bf0 <USB_EPStartXfer+0x3c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001c74:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8001c78:	b29b      	uxth	r3, r3
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001c7a:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001c7e:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8001c82:	bf0c      	ite	eq
 8001c84:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001c88:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8001c8c:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8001c90:	780a      	ldrb	r2, [r1, #0]
 8001c92:	68c9      	ldr	r1, [r1, #12]
 8001c94:	f7ff ff7e 	bl	8001b94 <USB_WritePacket>
 8001c98:	e7bf      	b.n	8001c1a <USB_EPStartXfer+0x66>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8001c9a:	4402      	add	r2, r0
 8001c9c:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8001ca0:	692c      	ldr	r4, [r5, #16]
 8001ca2:	403c      	ands	r4, r7
 8001ca4:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8001ca6:	692c      	ldr	r4, [r5, #16]
 8001ca8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001cac:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001cb0:	612c      	str	r4, [r5, #16]
 8001cb2:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8001cb4:	b9fb      	cbnz	r3, 8001cf6 <USB_EPStartXfer+0x142>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001cb6:	692b      	ldr	r3, [r5, #16]
 8001cb8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001cbc:	431c      	orrs	r4, r3
 8001cbe:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001cc0:	692b      	ldr	r3, [r5, #16]
 8001cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8001cc6:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8001cc8:	78cb      	ldrb	r3, [r1, #3]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d10c      	bne.n	8001ce8 <USB_EPStartXfer+0x134>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001cce:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001cd2:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001cd6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001cda:	bf0c      	ite	eq
 8001cdc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001ce0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001ce8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001cec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001cf0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001cf4:	e791      	b.n	8001c1a <USB_EPStartXfer+0x66>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8001cf6:	4423      	add	r3, r4
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8001cfe:	4e07      	ldr	r6, [pc, #28]	; (8001d1c <USB_EPStartXfer+0x168>)
 8001d00:	692f      	ldr	r7, [r5, #16]
 8001d02:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4363      	muls	r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8001d0a:	433e      	orrs	r6, r7
 8001d0c:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8001d0e:	692e      	ldr	r6, [r5, #16]
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	4333      	orrs	r3, r6
 8001d16:	e7d6      	b.n	8001cc6 <USB_EPStartXfer+0x112>
 8001d18:	fff80000 	.word	0xfff80000
 8001d1c:	1ff80000 	.word	0x1ff80000

08001d20 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8001d20:	3203      	adds	r2, #3
 8001d22:	f022 0203 	bic.w	r2, r2, #3
 8001d26:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001d28:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8001d2c:	4291      	cmp	r1, r2
 8001d2e:	d101      	bne.n	8001d34 <USB_ReadPacket+0x14>
}
 8001d30:	4608      	mov	r0, r1
 8001d32:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001d34:	6803      	ldr	r3, [r0, #0]
 8001d36:	f841 3b04 	str.w	r3, [r1], #4
 8001d3a:	e7f7      	b.n	8001d2c <USB_ReadPacket+0xc>

08001d3c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8001d3c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001d3e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8001d40:	2a01      	cmp	r2, #1
 8001d42:	ea4f 1243 	mov.w	r2, r3, lsl #5
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8001d46:	4410      	add	r0, r2
  if (ep->is_in == 1U)
 8001d48:	d112      	bne.n	8001d70 <USB_EPSetStall+0x34>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8001d4a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	db06      	blt.n	8001d60 <USB_EPSetStall+0x24>
 8001d52:	b12b      	cbz	r3, 8001d60 <USB_EPSetStall+0x24>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8001d54:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d5c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8001d60:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d68:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8001d70:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	db06      	blt.n	8001d86 <USB_EPSetStall+0x4a>
 8001d78:	b12b      	cbz	r3, 8001d86 <USB_EPSetStall+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8001d7a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d82:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001d86:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d8e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8001d92:	e7eb      	b.n	8001d6c <USB_EPSetStall+0x30>

08001d94 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8001d94:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8001d96:	784a      	ldrb	r2, [r1, #1]
 8001d98:	015b      	lsls	r3, r3, #5
 8001d9a:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d9c:	4418      	add	r0, r3
  if (ep->is_in == 1U)
 8001d9e:	d111      	bne.n	8001dc4 <USB_EPClearStall+0x30>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001da0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001da8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8001dac:	78cb      	ldrb	r3, [r1, #3]
 8001dae:	3b02      	subs	r3, #2
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d805      	bhi.n	8001dc0 <USB_EPClearStall+0x2c>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001db4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dc4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dcc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8001dd0:	78cb      	ldrb	r3, [r1, #3]
 8001dd2:	3b02      	subs	r3, #2
 8001dd4:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001dd6:	bf9e      	ittt	ls
 8001dd8:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8001ddc:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001de0:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8001de4:	e7ec      	b.n	8001dc0 <USB_EPClearStall+0x2c>

08001de6 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8001de6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8001dea:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8001dec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001df0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8001df4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001df8:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001dfc:	4319      	orrs	r1, r3
 8001dfe:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001e02:	2000      	movs	r0, #0
 8001e04:	4770      	bx	lr

08001e06 <USB_DevConnect>:
{
 8001e06:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8001e08:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001e0c:	f023 0302 	bic.w	r3, r3, #2
 8001e10:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f7fe fbd5 	bl	80005c4 <HAL_Delay>
}
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	bd08      	pop	{r3, pc}

08001e1e <USB_DevDisconnect>:
{
 8001e1e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001e20:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f7fe fbc9 	bl	80005c4 <HAL_Delay>
}
 8001e32:	2000      	movs	r0, #0
 8001e34:	bd08      	pop	{r3, pc}

08001e36 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8001e36:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8001e38:	6980      	ldr	r0, [r0, #24]
}
 8001e3a:	4010      	ands	r0, r2
 8001e3c:	4770      	bx	lr

08001e3e <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8001e3e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001e42:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8001e46:	69c0      	ldr	r0, [r0, #28]
 8001e48:	4018      	ands	r0, r3
}
 8001e4a:	0c00      	lsrs	r0, r0, #16
 8001e4c:	4770      	bx	lr

08001e4e <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8001e4e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001e52:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8001e56:	69c0      	ldr	r0, [r0, #28]
 8001e58:	4018      	ands	r0, r3
}
 8001e5a:	b280      	uxth	r0, r0
 8001e5c:	4770      	bx	lr

08001e5e <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8001e5e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8001e62:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8001e66:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8001e6a:	6940      	ldr	r0, [r0, #20]
}
 8001e6c:	4010      	ands	r0, r2
 8001e6e:	4770      	bx	lr

08001e70 <USB_ReadDevInEPInterrupt>:
{
 8001e70:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8001e72:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001e76:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8001e7a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8001e7e:	f001 010f 	and.w	r1, r1, #15
 8001e82:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8001e84:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8001e88:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8001e8a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4323      	orrs	r3, r4
}
 8001e90:	4018      	ands	r0, r3
 8001e92:	bd10      	pop	{r4, pc}

08001e94 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8001e94:	6940      	ldr	r0, [r0, #20]
}
 8001e96:	f000 0001 	and.w	r0, r0, #1
 8001e9a:	4770      	bx	lr

08001e9c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001e9c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001ea0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ea4:	f023 0307 	bic.w	r3, r3, #7
 8001ea8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001eac:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8001eb8:	2000      	movs	r0, #0
 8001eba:	4770      	bx	lr

08001ebc <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ebc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <USB_EP0_OutStart+0x40>)
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d903      	bls.n	8001ecc <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001ec4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db14      	blt.n	8001ef6 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001ed2:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8001ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eda:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001ede:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8001ee2:	f043 0318 	orr.w	r3, r3, #24
 8001ee6:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8001eea:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8001eee:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001ef2:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	4f54300a 	.word	0x4f54300a

08001f00 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001f00:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8001f04:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001f06:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001f0a:	b15b      	cbz	r3, 8001f24 <USBD_CDC_EP0_RxReady+0x24>
 8001f0c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001f10:	28ff      	cmp	r0, #255	; 0xff
 8001f12:	d007      	beq.n	8001f24 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8001f1e:	23ff      	movs	r3, #255	; 0xff
 8001f20:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8001f24:	2000      	movs	r0, #0
 8001f26:	bd10      	pop	{r4, pc}

08001f28 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8001f28:	2343      	movs	r3, #67	; 0x43
 8001f2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001f2c:	4800      	ldr	r0, [pc, #0]	; (8001f30 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001f2e:	4770      	bx	lr
 8001f30:	20000040 	.word	0x20000040

08001f34 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8001f34:	2343      	movs	r3, #67	; 0x43
 8001f36:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001f38:	4800      	ldr	r0, [pc, #0]	; (8001f3c <USBD_CDC_GetHSCfgDesc+0x8>)
 8001f3a:	4770      	bx	lr
 8001f3c:	20000084 	.word	0x20000084

08001f40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001f40:	2343      	movs	r3, #67	; 0x43
 8001f42:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001f44:	4800      	ldr	r0, [pc, #0]	; (8001f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001f46:	4770      	bx	lr
 8001f48:	200000d4 	.word	0x200000d4

08001f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001f50:	4800      	ldr	r0, [pc, #0]	; (8001f54 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001f52:	4770      	bx	lr
 8001f54:	200000c8 	.word	0x200000c8

08001f58 <USBD_CDC_DataOut>:
{
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001f5c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001f60:	f000 ff10 	bl	8002d84 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8001f64:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001f68:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8001f6c:	b14b      	cbz	r3, 8001f82 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001f6e:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8001f72:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001f7c:	4798      	blx	r3
    return USBD_OK;
 8001f7e:	2000      	movs	r0, #0
 8001f80:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001f82:	2002      	movs	r0, #2
}
 8001f84:	bd38      	pop	{r3, r4, r5, pc}

08001f86 <USBD_CDC_DataIn>:
{
 8001f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001f88:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8001f8c:	b1d6      	cbz	r6, 8001fc4 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001f8e:	2314      	movs	r3, #20
 8001f90:	fb03 0301 	mla	r3, r3, r1, r0
 8001f94:	69dd      	ldr	r5, [r3, #28]
 8001f96:	b18d      	cbz	r5, 8001fbc <USBD_CDC_DataIn+0x36>
 8001f98:	271c      	movs	r7, #28
 8001f9a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8001f9e:	fb07 4201 	mla	r2, r7, r1, r4
 8001fa2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fa4:	fbb5 f4f2 	udiv	r4, r5, r2
 8001fa8:	fb02 5414 	mls	r4, r2, r4, r5
 8001fac:	b934      	cbnz	r4, 8001fbc <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8001fae:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	f000 feca 	bl	8002d4c <USBD_LL_Transmit>
    return USBD_OK;
 8001fb8:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8001fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8001fc4:	2002      	movs	r0, #2
}
 8001fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fc8 <USBD_CDC_Setup>:
{
 8001fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8001fcc:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fd0:	780a      	ldrb	r2, [r1, #0]
{
 8001fd2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fd4:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8001fd8:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001fda:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8001fde:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8001fe2:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fe6:	d028      	beq.n	800203a <USBD_CDC_Setup+0x72>
 8001fe8:	2c20      	cmp	r4, #32
 8001fea:	d147      	bne.n	800207c <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8001fec:	88cc      	ldrh	r4, [r1, #6]
 8001fee:	784b      	ldrb	r3, [r1, #1]
 8001ff0:	b1e4      	cbz	r4, 800202c <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8001ff2:	0612      	lsls	r2, r2, #24
 8001ff4:	d511      	bpl.n	800201a <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001ff6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001ffa:	4639      	mov	r1, r7
 8001ffc:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8002000:	4618      	mov	r0, r3
 8002002:	4622      	mov	r2, r4
 8002004:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002006:	88f2      	ldrh	r2, [r6, #6]
 8002008:	4639      	mov	r1, r7
 800200a:	4628      	mov	r0, r5
 800200c:	f000 fc3f 	bl	800288e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002010:	4644      	mov	r4, r8
}
 8002012:	4620      	mov	r0, r4
 8002014:	b003      	add	sp, #12
 8002016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800201a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800201e:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002022:	4622      	mov	r2, r4
 8002024:	4639      	mov	r1, r7
 8002026:	f000 fc47 	bl	80028b8 <USBD_CtlPrepareRx>
 800202a:	e7f1      	b.n	8002010 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800202c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8002030:	4618      	mov	r0, r3
 8002032:	6895      	ldr	r5, [r2, #8]
 8002034:	4622      	mov	r2, r4
 8002036:	47a8      	blx	r5
 8002038:	e7eb      	b.n	8002012 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800203a:	784f      	ldrb	r7, [r1, #1]
 800203c:	2f0a      	cmp	r7, #10
 800203e:	d00d      	beq.n	800205c <USBD_CDC_Setup+0x94>
 8002040:	2f0b      	cmp	r7, #11
 8002042:	d015      	beq.n	8002070 <USBD_CDC_Setup+0xa8>
 8002044:	b9d7      	cbnz	r7, 800207c <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002046:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800204a:	2b03      	cmp	r3, #3
 800204c:	d114      	bne.n	8002078 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800204e:	2202      	movs	r2, #2
 8002050:	f10d 0106 	add.w	r1, sp, #6
 8002054:	f000 fc1b 	bl	800288e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002058:	463c      	mov	r4, r7
 800205a:	e7da      	b.n	8002012 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800205c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002060:	2b03      	cmp	r3, #3
 8002062:	d109      	bne.n	8002078 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002064:	2201      	movs	r2, #1
 8002066:	f10d 0105 	add.w	r1, sp, #5
 800206a:	f000 fc10 	bl	800288e <USBD_CtlSendData>
 800206e:	e7d0      	b.n	8002012 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002070:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002074:	2b03      	cmp	r3, #3
 8002076:	d0cc      	beq.n	8002012 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8002078:	4631      	mov	r1, r6
 800207a:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 800207c:	f000 fbe0 	bl	8002840 <USBD_CtlError>
      ret = USBD_FAIL;
 8002080:	2402      	movs	r4, #2
      break;
 8002082:	e7c6      	b.n	8002012 <USBD_CDC_Setup+0x4a>

08002084 <USBD_CDC_DeInit>:
{
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002088:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800208a:	2181      	movs	r1, #129	; 0x81
 800208c:	f000 fe14 	bl	8002cb8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002090:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002092:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002094:	4620      	mov	r0, r4
 8002096:	f000 fe0f 	bl	8002cb8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800209a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800209e:	2182      	movs	r1, #130	; 0x82
 80020a0:	4620      	mov	r0, r4
 80020a2:	f000 fe09 	bl	8002cb8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80020a6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80020aa:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80020ac:	b14b      	cbz	r3, 80020c2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80020ae:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80020b6:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80020ba:	f000 fe6b 	bl	8002d94 <USBD_static_free>
    pdev->pClassData = NULL;
 80020be:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80020c2:	2000      	movs	r0, #0
 80020c4:	bd38      	pop	{r3, r4, r5, pc}

080020c6 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80020c6:	7c03      	ldrb	r3, [r0, #16]
{
 80020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020cc:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80020ce:	bbcb      	cbnz	r3, 8002144 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80020d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d4:	2202      	movs	r2, #2
 80020d6:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80020d8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80020da:	f000 fddd 	bl	8002c98 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80020de:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80020e2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80020e4:	4629      	mov	r1, r5
 80020e6:	2202      	movs	r2, #2
 80020e8:	4620      	mov	r0, r4
 80020ea:	f000 fdd5 	bl	8002c98 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80020ee:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80020f2:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80020f4:	2308      	movs	r3, #8
 80020f6:	2203      	movs	r2, #3
 80020f8:	2182      	movs	r1, #130	; 0x82
 80020fa:	4620      	mov	r0, r4
 80020fc:	f000 fdcc 	bl	8002c98 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002100:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002102:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002106:	f000 fe41 	bl	8002d8c <USBD_static_malloc>
 800210a:	4606      	mov	r6, r0
 800210c:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002110:	b358      	cbz	r0, 800216a <USBD_CDC_Init+0xa4>
    hcdc->TxState = 0U;
 8002112:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002114:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800211c:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8002120:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8002124:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002128:	f1b8 0f00 	cmp.w	r8, #0
 800212c:	d113      	bne.n	8002156 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800212e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002132:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002136:	4629      	mov	r1, r5
 8002138:	4620      	mov	r0, r4
 800213a:	f000 fe15 	bl	8002d68 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800213e:	4640      	mov	r0, r8
 8002140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002144:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002146:	2340      	movs	r3, #64	; 0x40
 8002148:	2202      	movs	r2, #2
 800214a:	2181      	movs	r1, #129	; 0x81
 800214c:	f000 fda4 	bl	8002c98 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002150:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002152:	2340      	movs	r3, #64	; 0x40
 8002154:	e7c6      	b.n	80020e4 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002156:	2340      	movs	r3, #64	; 0x40
 8002158:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800215c:	4629      	mov	r1, r5
 800215e:	4620      	mov	r0, r4
 8002160:	f000 fe02 	bl	8002d68 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002164:	4638      	mov	r0, r7
 8002166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800216a:	4628      	mov	r0, r5
}
 800216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002170 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8002170:	b119      	cbz	r1, 800217a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8002172:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8002176:	2000      	movs	r0, #0
 8002178:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800217a:	2002      	movs	r0, #2
  }

  return ret;
}
 800217c:	4770      	bx	lr

0800217e <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800217e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002182:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002184:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002188:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800218c:	4770      	bx	lr

0800218e <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800218e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8002192:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002194:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002198:	4770      	bx	lr

0800219a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800219a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800219e:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80021a0:	b162      	cbz	r2, 80021bc <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80021a2:	7c04      	ldrb	r4, [r0, #16]
 80021a4:	b944      	cbnz	r4, 80021b8 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80021a6:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80021aa:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80021ae:	2101      	movs	r1, #1
 80021b0:	f000 fdda 	bl	8002d68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80021b4:	2000      	movs	r0, #0
 80021b6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	e7f6      	b.n	80021aa <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80021bc:	2002      	movs	r0, #2
  }
}
 80021be:	bd10      	pop	{r4, pc}

080021c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80021c0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80021c2:	b180      	cbz	r0, 80021e6 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80021c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80021c8:	b113      	cbz	r3, 80021d0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80021d0:	b109      	cbz	r1, 80021d6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80021d2:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021d6:	2301      	movs	r3, #1
  pdev->id = id;
 80021d8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021da:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80021de:	f000 fd23 	bl	8002c28 <USBD_LL_Init>

  return USBD_OK;
 80021e2:	2000      	movs	r0, #0
 80021e4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80021e6:	2002      	movs	r0, #2
}
 80021e8:	bd08      	pop	{r3, pc}

080021ea <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80021ea:	b119      	cbz	r1, 80021f4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80021ec:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80021f0:	2000      	movs	r0, #0
 80021f2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80021f4:	2002      	movs	r0, #2
  }

  return status;
}
 80021f6:	4770      	bx	lr

080021f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80021f8:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80021fa:	f000 fd3f 	bl	8002c7c <USBD_LL_Start>

  return USBD_OK;
}
 80021fe:	2000      	movs	r0, #0
 8002200:	bd08      	pop	{r3, pc}

08002202 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002202:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002204:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002208:	b90b      	cbnz	r3, 800220e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800220a:	2002      	movs	r0, #2
 800220c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4798      	blx	r3
 8002212:	2800      	cmp	r0, #0
 8002214:	d1f9      	bne.n	800220a <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002216:	bd08      	pop	{r3, pc}

08002218 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002218:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800221a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4798      	blx	r3

  return USBD_OK;
}
 8002222:	2000      	movs	r0, #0
 8002224:	bd08      	pop	{r3, pc}

08002226 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002226:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002228:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 800222c:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800222e:	4628      	mov	r0, r5
 8002230:	f000 faf2 	bl	8002818 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002234:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002236:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800223a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800223e:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002242:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002246:	f001 031f 	and.w	r3, r1, #31
 800224a:	2b01      	cmp	r3, #1
 800224c:	d00e      	beq.n	800226c <USBD_LL_SetupStage+0x46>
 800224e:	d307      	bcc.n	8002260 <USBD_LL_SetupStage+0x3a>
 8002250:	2b02      	cmp	r3, #2
 8002252:	d010      	beq.n	8002276 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002254:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002258:	4620      	mov	r0, r4
 800225a:	f000 fd3b 	bl	8002cd4 <USBD_LL_StallEP>
      break;
 800225e:	e003      	b.n	8002268 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8002260:	4629      	mov	r1, r5
 8002262:	4620      	mov	r0, r4
 8002264:	f000 f906 	bl	8002474 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002268:	2000      	movs	r0, #0
 800226a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800226c:	4629      	mov	r1, r5
 800226e:	4620      	mov	r0, r4
 8002270:	f000 fa24 	bl	80026bc <USBD_StdItfReq>
      break;
 8002274:	e7f8      	b.n	8002268 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8002276:	4629      	mov	r1, r5
 8002278:	4620      	mov	r0, r4
 800227a:	f000 fa44 	bl	8002706 <USBD_StdEPReq>
      break;
 800227e:	e7f3      	b.n	8002268 <USBD_LL_SetupStage+0x42>

08002280 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4605      	mov	r5, r0
 8002284:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002286:	bb49      	cbnz	r1, 80022dc <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002288:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800228c:	2b03      	cmp	r3, #3
 800228e:	d11e      	bne.n	80022ce <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002290:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8002294:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8002298:	4293      	cmp	r3, r2
 800229a:	d90b      	bls.n	80022b4 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 800229c:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 800229e:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80022a0:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80022a4:	bf8c      	ite	hi
 80022a6:	b29a      	uxthhi	r2, r3
 80022a8:	b292      	uxthls	r2, r2
 80022aa:	4631      	mov	r1, r6
 80022ac:	f000 fb13 	bl	80028d6 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80022b0:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80022b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	b123      	cbz	r3, 80022c6 <USBD_LL_DataOutStage+0x46>
 80022bc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80022c0:	2a03      	cmp	r2, #3
 80022c2:	d100      	bne.n	80022c6 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80022c4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80022c6:	4628      	mov	r0, r5
 80022c8:	f000 fb0d 	bl	80028e6 <USBD_CtlSendStatus>
 80022cc:	e7f0      	b.n	80022b0 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d1ee      	bne.n	80022b0 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80022d2:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80022d6:	f000 fcfd 	bl	8002cd4 <USBD_LL_StallEP>
 80022da:	e7e9      	b.n	80022b0 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 80022dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	b12b      	cbz	r3, 80022f0 <USBD_LL_DataOutStage+0x70>
 80022e4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80022e8:	2a03      	cmp	r2, #3
 80022ea:	d101      	bne.n	80022f0 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80022ec:	4798      	blx	r3
 80022ee:	e7df      	b.n	80022b0 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80022f0:	2002      	movs	r0, #2
}
 80022f2:	bd70      	pop	{r4, r5, r6, pc}

080022f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	4613      	mov	r3, r2
 80022f8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80022fa:	460e      	mov	r6, r1
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d147      	bne.n	8002390 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002300:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002304:	2a02      	cmp	r2, #2
 8002306:	d13c      	bne.n	8002382 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002308:	6a05      	ldr	r5, [r0, #32]
 800230a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800230c:	4295      	cmp	r5, r2
 800230e:	d913      	bls.n	8002338 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002310:	1aaa      	subs	r2, r5, r2
 8002312:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002314:	4619      	mov	r1, r3
 8002316:	b292      	uxth	r2, r2
 8002318:	f000 fac6 	bl	80028a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800231c:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800231e:	461a      	mov	r2, r3
 8002320:	4619      	mov	r1, r3
 8002322:	4620      	mov	r0, r4
 8002324:	f000 fd20 	bl	8002d68 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002328:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800232c:	2000      	movs	r0, #0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d13a      	bne.n	80023a8 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002332:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8002336:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002338:	69c3      	ldr	r3, [r0, #28]
 800233a:	fbb3 f5f2 	udiv	r5, r3, r2
 800233e:	fb02 3515 	mls	r5, r2, r5, r3
 8002342:	b965      	cbnz	r5, 800235e <USBD_LL_DataInStage+0x6a>
 8002344:	429a      	cmp	r2, r3
 8002346:	d80a      	bhi.n	800235e <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8002348:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800234c:	4293      	cmp	r3, r2
 800234e:	d206      	bcs.n	800235e <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002350:	462a      	mov	r2, r5
 8002352:	f000 faa9 	bl	80028a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002356:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800235a:	462b      	mov	r3, r5
 800235c:	e7df      	b.n	800231e <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800235e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	b12b      	cbz	r3, 8002372 <USBD_LL_DataInStage+0x7e>
 8002366:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800236a:	2a03      	cmp	r2, #3
 800236c:	d101      	bne.n	8002372 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800236e:	4620      	mov	r0, r4
 8002370:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	4620      	mov	r0, r4
 8002376:	f000 fcad 	bl	8002cd4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800237a:	4620      	mov	r0, r4
 800237c:	f000 fabe 	bl	80028fc <USBD_CtlReceiveStatus>
 8002380:	e7d2      	b.n	8002328 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002382:	f032 0304 	bics.w	r3, r2, #4
 8002386:	d1cf      	bne.n	8002328 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	f000 fca3 	bl	8002cd4 <USBD_LL_StallEP>
 800238e:	e7cb      	b.n	8002328 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8002390:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	b133      	cbz	r3, 80023a6 <USBD_LL_DataInStage+0xb2>
 8002398:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800239c:	2a03      	cmp	r2, #3
 800239e:	d102      	bne.n	80023a6 <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80023a0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80023a2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80023a6:	2002      	movs	r0, #2
}
 80023a8:	bd70      	pop	{r4, r5, r6, pc}

080023aa <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80023aa:	2200      	movs	r2, #0
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80023b0:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80023b2:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80023b4:	4611      	mov	r1, r2
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	f000 fc6e 	bl	8002c98 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80023bc:	4633      	mov	r3, r6
 80023be:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80023c0:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80023c4:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80023c8:	2200      	movs	r2, #0
 80023ca:	4620      	mov	r0, r4
 80023cc:	f000 fc64 	bl	8002c98 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80023d0:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80023d2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80023d6:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80023d8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80023da:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80023de:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80023e2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80023e4:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80023e8:	b123      	cbz	r3, 80023f4 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80023ea:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80023ee:	4620      	mov	r0, r4
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80023f4:	2000      	movs	r0, #0
 80023f6:	bd70      	pop	{r4, r5, r6, pc}

080023f8 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80023f8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80023fa:	2000      	movs	r0, #0
 80023fc:	4770      	bx	lr

080023fe <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80023fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002402:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002406:	2304      	movs	r3, #4
 8002408:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800240c:	2000      	movs	r0, #0
 800240e:	4770      	bx	lr

08002410 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002410:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002414:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002416:	bf04      	itt	eq
 8002418:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800241c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002420:	2000      	movs	r0, #0
 8002422:	4770      	bx	lr

08002424 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002424:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002426:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800242a:	2a03      	cmp	r2, #3
 800242c:	d104      	bne.n	8002438 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800242e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	b103      	cbz	r3, 8002438 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002436:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002438:	2000      	movs	r0, #0
 800243a:	bd08      	pop	{r3, pc}

0800243c <USBD_LL_IsoINIncomplete>:
 800243c:	2000      	movs	r0, #0
 800243e:	4770      	bx	lr

08002440 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8002440:	2000      	movs	r0, #0
 8002442:	4770      	bx	lr

08002444 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8002444:	2000      	movs	r0, #0
 8002446:	4770      	bx	lr

08002448 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002448:	2201      	movs	r2, #1
{
 800244a:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800244c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002450:	f8d0 22b4 	ldr.w	r2, [r0, #692]	; 0x2b4
 8002454:	7901      	ldrb	r1, [r0, #4]
 8002456:	6852      	ldr	r2, [r2, #4]
 8002458:	4790      	blx	r2

  return USBD_OK;
}
 800245a:	2000      	movs	r0, #0
 800245c:	bd08      	pop	{r3, pc}

0800245e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800245e:	b510      	push	{r4, lr}
 8002460:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	f000 fc36 	bl	8002cd4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002468:	4620      	mov	r0, r4
}
 800246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800246e:	2100      	movs	r1, #0
 8002470:	f000 bc30 	b.w	8002cd4 <USBD_LL_StallEP>

08002474 <USBD_StdDevReq>:
{
 8002474:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002476:	780b      	ldrb	r3, [r1, #0]
{
 8002478:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800247a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800247e:	2b20      	cmp	r3, #32
{
 8002480:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002482:	d012      	beq.n	80024aa <USBD_StdDevReq+0x36>
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	d010      	beq.n	80024aa <USBD_StdDevReq+0x36>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d15c      	bne.n	8002546 <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 800248c:	784b      	ldrb	r3, [r1, #1]
 800248e:	2b09      	cmp	r3, #9
 8002490:	d858      	bhi.n	8002544 <USBD_StdDevReq+0xd0>
 8002492:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002496:	00e9      	.short	0x00e9
 8002498:	00570105 	.word	0x00570105
 800249c:	005700fe 	.word	0x005700fe
 80024a0:	00130084 	.word	0x00130084
 80024a4:	00d20057 	.word	0x00d20057
 80024a8:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80024aa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80024ae:	4629      	mov	r1, r5
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4620      	mov	r0, r4
 80024b4:	4798      	blx	r3
}
 80024b6:	2000      	movs	r0, #0
 80024b8:	b003      	add	sp, #12
 80024ba:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80024c2:	884b      	ldrh	r3, [r1, #2]
 80024c4:	0a1a      	lsrs	r2, r3, #8
 80024c6:	3a01      	subs	r2, #1
 80024c8:	2a06      	cmp	r2, #6
 80024ca:	d83b      	bhi.n	8002544 <USBD_StdDevReq+0xd0>
 80024cc:	e8df f002 	tbb	[pc, r2]
 80024d0:	3a2d2004 	.word	0x3a2d2004
 80024d4:	523a      	.short	0x523a
 80024d6:	5c          	.byte	0x5c
 80024d7:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80024d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80024dc:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80024de:	f10d 0106 	add.w	r1, sp, #6
 80024e2:	7c20      	ldrb	r0, [r4, #16]
 80024e4:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80024e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80024ea:	b152      	cbz	r2, 8002502 <USBD_StdDevReq+0x8e>
 80024ec:	88eb      	ldrh	r3, [r5, #6]
 80024ee:	b143      	cbz	r3, 8002502 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 80024f0:	429a      	cmp	r2, r3
 80024f2:	bf28      	it	cs
 80024f4:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80024f6:	4601      	mov	r1, r0
 80024f8:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80024fa:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80024fe:	f000 f9c6 	bl	800288e <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002502:	88eb      	ldrh	r3, [r5, #6]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1d6      	bne.n	80024b6 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8002508:	4620      	mov	r0, r4
 800250a:	f000 f9ec 	bl	80028e6 <USBD_CtlSendStatus>
 800250e:	e7d2      	b.n	80024b6 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002510:	7c02      	ldrb	r2, [r0, #16]
 8002512:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002516:	b932      	cbnz	r2, 8002526 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800251a:	f10d 0006 	add.w	r0, sp, #6
 800251e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002520:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002522:	7043      	strb	r3, [r0, #1]
 8002524:	e7df      	b.n	80024e6 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	e7f7      	b.n	800251a <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b05      	cmp	r3, #5
 800252e:	d809      	bhi.n	8002544 <USBD_StdDevReq+0xd0>
 8002530:	e8df f003 	tbb	[pc, r3]
 8002534:	14100c03 	.word	0x14100c03
 8002538:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800253a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800253e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1cc      	bne.n	80024de <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 8002544:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8002546:	f7ff ff8a 	bl	800245e <USBD_CtlError.constprop.1>
  return ret;
 800254a:	e7b4      	b.n	80024b6 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800254c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	e7f5      	b.n	8002540 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002554:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	e7f1      	b.n	8002540 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800255c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	e7ed      	b.n	8002540 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002564:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	e7e9      	b.n	8002540 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800256c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	e7e5      	b.n	8002540 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002574:	7c03      	ldrb	r3, [r0, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e4      	bne.n	8002544 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800257a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800257e:	f10d 0006 	add.w	r0, sp, #6
 8002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002584:	4798      	blx	r3
 8002586:	e7ae      	b.n	80024e6 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002588:	7c03      	ldrb	r3, [r0, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1da      	bne.n	8002544 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800258e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002592:	f10d 0006 	add.w	r0, sp, #6
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800259a:	2307      	movs	r3, #7
 800259c:	e7c1      	b.n	8002522 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800259e:	888b      	ldrh	r3, [r1, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1cf      	bne.n	8002544 <USBD_StdDevReq+0xd0>
 80025a4:	88cb      	ldrh	r3, [r1, #6]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1cc      	bne.n	8002544 <USBD_StdDevReq+0xd0>
 80025aa:	884d      	ldrh	r5, [r1, #2]
 80025ac:	2d7f      	cmp	r5, #127	; 0x7f
 80025ae:	d8c9      	bhi.n	8002544 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80025b4:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d0c4      	beq.n	8002544 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 80025ba:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80025be:	f000 fbb7 	bl	8002d30 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 f98f 	bl	80028e6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80025c8:	b11d      	cbz	r5, 80025d2 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80025ca:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80025cc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80025d0:	e771      	b.n	80024b6 <USBD_StdDevReq+0x42>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e7fa      	b.n	80025cc <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80025d6:	7889      	ldrb	r1, [r1, #2]
 80025d8:	4d37      	ldr	r5, [pc, #220]	; (80026b8 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80025da:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80025dc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80025de:	d8b1      	bhi.n	8002544 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80025e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d008      	beq.n	80025fa <USBD_StdDevReq+0x186>
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d014      	beq.n	8002616 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 80025ec:	f7ff ff37 	bl	800245e <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80025f0:	7829      	ldrb	r1, [r5, #0]
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7ff fe10 	bl	8002218 <USBD_ClrClassConfig>
 80025f8:	e75d      	b.n	80024b6 <USBD_StdDevReq+0x42>
        if (cfgidx)
 80025fa:	2900      	cmp	r1, #0
 80025fc:	d084      	beq.n	8002508 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 80025fe:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002600:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8002602:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002604:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff fdfa 	bl	8002202 <USBD_SetClassConfig>
 800260e:	2802      	cmp	r0, #2
 8002610:	f47f af7a 	bne.w	8002508 <USBD_StdDevReq+0x94>
 8002614:	e796      	b.n	8002544 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8002616:	b931      	cbnz	r1, 8002626 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002618:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800261a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800261c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8002620:	f7ff fdfa 	bl	8002218 <USBD_ClrClassConfig>
 8002624:	e770      	b.n	8002508 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8002626:	6841      	ldr	r1, [r0, #4]
 8002628:	2901      	cmp	r1, #1
 800262a:	f43f af6d 	beq.w	8002508 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800262e:	b2c9      	uxtb	r1, r1
 8002630:	f7ff fdf2 	bl	8002218 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8002634:	7829      	ldrb	r1, [r5, #0]
 8002636:	6061      	str	r1, [r4, #4]
 8002638:	e7e6      	b.n	8002608 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800263a:	88ca      	ldrh	r2, [r1, #6]
 800263c:	2a01      	cmp	r2, #1
 800263e:	d181      	bne.n	8002544 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8002640:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002644:	2b00      	cmp	r3, #0
 8002646:	f43f af7d 	beq.w	8002544 <USBD_StdDevReq+0xd0>
 800264a:	2b02      	cmp	r3, #2
 800264c:	d904      	bls.n	8002658 <USBD_StdDevReq+0x1e4>
 800264e:	2b03      	cmp	r3, #3
 8002650:	f47f af78 	bne.w	8002544 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002654:	1d01      	adds	r1, r0, #4
 8002656:	e003      	b.n	8002660 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8002658:	4601      	mov	r1, r0
 800265a:	2300      	movs	r3, #0
 800265c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002660:	4620      	mov	r0, r4
 8002662:	f000 f914 	bl	800288e <USBD_CtlSendData>
 8002666:	e726      	b.n	80024b6 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8002668:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800266c:	3b01      	subs	r3, #1
 800266e:	2b02      	cmp	r3, #2
 8002670:	f63f af68 	bhi.w	8002544 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8002674:	88cb      	ldrh	r3, [r1, #6]
 8002676:	2b02      	cmp	r3, #2
 8002678:	f47f af64 	bne.w	8002544 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800267c:	2301      	movs	r3, #1
 800267e:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8002680:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8002684:	b10b      	cbz	r3, 800268a <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002686:	2303      	movs	r3, #3
 8002688:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800268a:	2202      	movs	r2, #2
 800268c:	f104 010c 	add.w	r1, r4, #12
 8002690:	e7e6      	b.n	8002660 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002692:	884b      	ldrh	r3, [r1, #2]
 8002694:	2b01      	cmp	r3, #1
 8002696:	f47f af0e 	bne.w	80024b6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800269a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800269e:	e733      	b.n	8002508 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80026a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80026a4:	3b01      	subs	r3, #1
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	f63f af4c 	bhi.w	8002544 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80026ac:	884b      	ldrh	r3, [r1, #2]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f47f af01 	bne.w	80024b6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e7f0      	b.n	800269a <USBD_StdDevReq+0x226>
 80026b8:	20000198 	.word	0x20000198

080026bc <USBD_StdItfReq>:
{
 80026bc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026be:	780b      	ldrb	r3, [r1, #0]
{
 80026c0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80026c6:	2b20      	cmp	r3, #32
{
 80026c8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026ca:	d002      	beq.n	80026d2 <USBD_StdItfReq+0x16>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d000      	beq.n	80026d2 <USBD_StdItfReq+0x16>
 80026d0:	b9b3      	cbnz	r3, 8002700 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 80026d2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80026d6:	3b01      	subs	r3, #1
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d810      	bhi.n	80026fe <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80026dc:	792b      	ldrb	r3, [r5, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d80d      	bhi.n	80026fe <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80026e2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80026e6:	4629      	mov	r1, r5
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4620      	mov	r0, r4
 80026ec:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80026ee:	88eb      	ldrh	r3, [r5, #6]
 80026f0:	b91b      	cbnz	r3, 80026fa <USBD_StdItfReq+0x3e>
 80026f2:	b910      	cbnz	r0, 80026fa <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80026f4:	4620      	mov	r0, r4
 80026f6:	f000 f8f6 	bl	80028e6 <USBD_CtlSendStatus>
}
 80026fa:	2000      	movs	r0, #0
 80026fc:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80026fe:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8002700:	f7ff fead 	bl	800245e <USBD_CtlError.constprop.1>
      break;
 8002704:	e7f9      	b.n	80026fa <USBD_StdItfReq+0x3e>

08002706 <USBD_StdEPReq>:
{
 8002706:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002708:	780a      	ldrb	r2, [r1, #0]
{
 800270a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800270c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002710:	2a20      	cmp	r2, #32
{
 8002712:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002714:	d013      	beq.n	800273e <USBD_StdEPReq+0x38>
 8002716:	2a40      	cmp	r2, #64	; 0x40
 8002718:	d011      	beq.n	800273e <USBD_StdEPReq+0x38>
 800271a:	b96a      	cbnz	r2, 8002738 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 800271c:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800271e:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8002720:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002722:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8002724:	d01f      	beq.n	8002766 <USBD_StdEPReq+0x60>
 8002726:	d335      	bcc.n	8002794 <USBD_StdEPReq+0x8e>
 8002728:	2d03      	cmp	r5, #3
 800272a:	d105      	bne.n	8002738 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800272c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002730:	2a02      	cmp	r2, #2
 8002732:	d026      	beq.n	8002782 <USBD_StdEPReq+0x7c>
 8002734:	2a03      	cmp	r2, #3
 8002736:	d00a      	beq.n	800274e <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 8002738:	f7ff fe91 	bl	800245e <USBD_CtlError.constprop.1>
      break;
 800273c:	e005      	b.n	800274a <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 800273e:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8002742:	4619      	mov	r1, r3
 8002744:	6892      	ldr	r2, [r2, #8]
 8002746:	4620      	mov	r0, r4
 8002748:	4790      	blx	r2
}
 800274a:	2000      	movs	r0, #0
 800274c:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 800274e:	885a      	ldrh	r2, [r3, #2]
 8002750:	b92a      	cbnz	r2, 800275e <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 8002752:	064a      	lsls	r2, r1, #25
 8002754:	d003      	beq.n	800275e <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002756:	88db      	ldrh	r3, [r3, #6]
 8002758:	b90b      	cbnz	r3, 800275e <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 800275a:	f000 fabb 	bl	8002cd4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800275e:	4620      	mov	r0, r4
 8002760:	f000 f8c1 	bl	80028e6 <USBD_CtlSendStatus>
              break;
 8002764:	e7f1      	b.n	800274a <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8002766:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800276a:	2a02      	cmp	r2, #2
 800276c:	d009      	beq.n	8002782 <USBD_StdEPReq+0x7c>
 800276e:	2a03      	cmp	r2, #3
 8002770:	d1e2      	bne.n	8002738 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e8      	bne.n	800274a <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002778:	064d      	lsls	r5, r1, #25
 800277a:	d0f0      	beq.n	800275e <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800277c:	f000 fab8 	bl	8002cf0 <USBD_LL_ClearStallEP>
 8002780:	e7ed      	b.n	800275e <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002782:	064b      	lsls	r3, r1, #25
 8002784:	d016      	beq.n	80027b4 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 8002786:	f000 faa5 	bl	8002cd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	4620      	mov	r0, r4
 800278e:	f000 faa1 	bl	8002cd4 <USBD_LL_StallEP>
 8002792:	e7da      	b.n	800274a <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8002794:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002798:	2b02      	cmp	r3, #2
 800279a:	d00d      	beq.n	80027b8 <USBD_StdEPReq+0xb2>
 800279c:	2b03      	cmp	r3, #3
 800279e:	d1cb      	bne.n	8002738 <USBD_StdEPReq+0x32>
 80027a0:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 80027a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027a6:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80027aa:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80027ae:	d014      	beq.n	80027da <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80027b0:	6992      	ldr	r2, [r2, #24]
 80027b2:	b9ea      	cbnz	r2, 80027f0 <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 80027b4:	4620      	mov	r0, r4
 80027b6:	e7bf      	b.n	8002738 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80027b8:	0649      	lsls	r1, r1, #25
 80027ba:	d1fb      	bne.n	80027b4 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80027bc:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 80027be:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80027c2:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80027c6:	bf4c      	ite	mi
 80027c8:	f100 0114 	addmi.w	r1, r0, #20
 80027cc:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80027d0:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80027d2:	4620      	mov	r0, r4
 80027d4:	f000 f85b 	bl	800288e <USBD_CtlSendData>
              break;
 80027d8:	e7b7      	b.n	800274a <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80027da:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d0e8      	beq.n	80027b4 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80027e2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80027e6:	fb03 0505 	mla	r5, r3, r5, r0
 80027ea:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80027ee:	e004      	b.n	80027fa <USBD_StdEPReq+0xf4>
 80027f0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80027f4:	fb05 3503 	mla	r5, r5, r3, r3
 80027f8:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80027fa:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80027fe:	d103      	bne.n	8002808 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8002800:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002802:	2202      	movs	r2, #2
 8002804:	4629      	mov	r1, r5
 8002806:	e7e4      	b.n	80027d2 <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8002808:	4620      	mov	r0, r4
 800280a:	f000 fa7f 	bl	8002d0c <USBD_LL_IsStallEP>
 800280e:	b108      	cbz	r0, 8002814 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8002810:	2301      	movs	r3, #1
 8002812:	e7f5      	b.n	8002800 <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 8002814:	6028      	str	r0, [r5, #0]
 8002816:	e7f4      	b.n	8002802 <USBD_StdEPReq+0xfc>

08002818 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8002818:	780b      	ldrb	r3, [r1, #0]
 800281a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800281c:	784b      	ldrb	r3, [r1, #1]
 800281e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002820:	78ca      	ldrb	r2, [r1, #3]
 8002822:	788b      	ldrb	r3, [r1, #2]
 8002824:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002828:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800282a:	794a      	ldrb	r2, [r1, #5]
 800282c:	790b      	ldrb	r3, [r1, #4]
 800282e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002832:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002834:	79ca      	ldrb	r2, [r1, #7]
 8002836:	798b      	ldrb	r3, [r1, #6]
 8002838:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800283c:	80c3      	strh	r3, [r0, #6]
 800283e:	4770      	bx	lr

08002840 <USBD_CtlError>:
{
 8002840:	b510      	push	{r4, lr}
 8002842:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	f000 fa45 	bl	8002cd4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800284a:	4620      	mov	r0, r4
}
 800284c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002850:	2100      	movs	r1, #0
 8002852:	f000 ba3f 	b.w	8002cd4 <USBD_LL_StallEP>

08002856 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002856:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8002858:	b188      	cbz	r0, 800287e <USBD_GetString+0x28>
 800285a:	4605      	mov	r5, r0
 800285c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800285e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2c00      	cmp	r4, #0
 8002866:	d1f9      	bne.n	800285c <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002868:	3301      	adds	r3, #1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800286e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002870:	2303      	movs	r3, #3
 8002872:	704b      	strb	r3, [r1, #1]
 8002874:	2302      	movs	r3, #2
 8002876:	3801      	subs	r0, #1
    while (*desc != '\0')
 8002878:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800287c:	b905      	cbnz	r5, 8002880 <USBD_GetString+0x2a>
 800287e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	54cd      	strb	r5, [r1, r3]
 8002884:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8002886:	3302      	adds	r3, #2
 8002888:	b2db      	uxtb	r3, r3
 800288a:	548c      	strb	r4, [r1, r2]
 800288c:	e7f4      	b.n	8002878 <USBD_GetString+0x22>

0800288e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800288e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002890:	2202      	movs	r2, #2
{
 8002892:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002894:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8002898:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800289a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800289c:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800289e:	2100      	movs	r1, #0
 80028a0:	f000 fa54 	bl	8002d4c <USBD_LL_Transmit>

  return USBD_OK;
}
 80028a4:	2000      	movs	r0, #0
 80028a6:	bd10      	pop	{r4, pc}

080028a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80028a8:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80028aa:	4613      	mov	r3, r2
 80028ac:	460a      	mov	r2, r1
 80028ae:	2100      	movs	r1, #0
 80028b0:	f000 fa4c 	bl	8002d4c <USBD_LL_Transmit>

  return USBD_OK;
}
 80028b4:	2000      	movs	r0, #0
 80028b6:	bd08      	pop	{r3, pc}

080028b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80028b8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80028ba:	2203      	movs	r2, #3
{
 80028bc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80028be:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80028c2:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80028c6:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80028c8:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80028cc:	2100      	movs	r1, #0
 80028ce:	f000 fa4b 	bl	8002d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80028d2:	2000      	movs	r0, #0
 80028d4:	bd10      	pop	{r4, pc}

080028d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80028d6:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80028d8:	4613      	mov	r3, r2
 80028da:	460a      	mov	r2, r1
 80028dc:	2100      	movs	r1, #0
 80028de:	f000 fa43 	bl	8002d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80028e2:	2000      	movs	r0, #0
 80028e4:	bd08      	pop	{r3, pc}

080028e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80028e6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80028e8:	2304      	movs	r3, #4
 80028ea:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80028ee:	2300      	movs	r3, #0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	f000 fa2a 	bl	8002d4c <USBD_LL_Transmit>

  return USBD_OK;
}
 80028f8:	2000      	movs	r0, #0
 80028fa:	bd08      	pop	{r3, pc}

080028fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80028fc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80028fe:	2305      	movs	r3, #5
 8002900:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002904:	2300      	movs	r3, #0
 8002906:	461a      	mov	r2, r3
 8002908:	4619      	mov	r1, r3
 800290a:	f000 fa2d 	bl	8002d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800290e:	2000      	movs	r0, #0
 8002910:	bd08      	pop	{r3, pc}
	...

08002914 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <MX_GPIO_Init+0x2c>)
{
 8002916:	b082      	sub	sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	f042 0204 	orr.w	r2, r2, #4
 800291e:	619a      	str	r2, [r3, #24]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	f002 0204 	and.w	r2, r2, #4
 8002926:	9200      	str	r2, [sp, #0]
 8002928:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	f042 0208 	orr.w	r2, r2, #8
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	9b01      	ldr	r3, [sp, #4]

}
 800293c:	b002      	add	sp, #8
 800293e:	4770      	bx	lr
 8002940:	40021000 	.word	0x40021000

08002944 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002944:	2238      	movs	r2, #56	; 0x38
{
 8002946:	b570      	push	{r4, r5, r6, lr}
 8002948:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800294a:	eb0d 0002 	add.w	r0, sp, r2
 800294e:	2100      	movs	r1, #0
 8002950:	f000 fae4 	bl	8002f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002954:	2214      	movs	r2, #20
 8002956:	2100      	movs	r1, #0
 8002958:	a801      	add	r0, sp, #4
 800295a:	f000 fadf 	bl	8002f1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800295e:	2100      	movs	r1, #0
 8002960:	2220      	movs	r2, #32
 8002962:	a806      	add	r0, sp, #24
 8002964:	f000 fada 	bl	8002f1c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800296c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800296e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002970:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002972:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002976:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002978:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800297c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297e:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002980:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002982:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002984:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002986:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8002988:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800298a:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800298c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800298e:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002990:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002992:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002994:	f7fe faa4 	bl	8000ee0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002998:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299a:	2600      	movs	r6, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800299e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029a2:	4621      	mov	r1, r4
 80029a4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029a6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029aa:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ac:	9605      	str	r6, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029ae:	f7fe fcff 	bl	80013b0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80029b2:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b4:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80029b6:	9306      	str	r3, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80029b8:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ba:	f7fe fd9d 	bl	80014f8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80029be:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <SystemClock_Config+0x84>)
 80029c0:	601d      	str	r5, [r3, #0]
}
 80029c2:	b01c      	add	sp, #112	; 0x70
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
 80029c6:	bf00      	nop
 80029c8:	42420070 	.word	0x42420070

080029cc <main>:
{
 80029cc:	b508      	push	{r3, lr}
  HAL_Init();
 80029ce:	f7fd fdd5 	bl	800057c <HAL_Init>
  SystemClock_Config();
 80029d2:	f7ff ffb7 	bl	8002944 <SystemClock_Config>
  MX_GPIO_Init();
 80029d6:	f7ff ff9d 	bl	8002914 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80029da:	f000 f861 	bl	8002aa0 <MX_USB_DEVICE_Init>
 80029de:	e7fe      	b.n	80029de <main+0x12>

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_MspInit+0x3c>)
{
 80029e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	f002 0201 	and.w	r2, r2, #1
 80029f6:	9200      	str	r2, [sp, #0]
 80029f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a00:	61da      	str	r2, [r3, #28]
 8002a02:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a0e:	6853      	ldr	r3, [r2, #4]
 8002a10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1a:	b002      	add	sp, #8
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010000 	.word	0x40010000

08002a28 <NMI_Handler>:
 8002a28:	4770      	bx	lr

08002a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2a:	e7fe      	b.n	8002a2a <HardFault_Handler>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	e7fe      	b.n	8002a2c <MemManage_Handler>

08002a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2e:	e7fe      	b.n	8002a2e <BusFault_Handler>

08002a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a30:	e7fe      	b.n	8002a30 <UsageFault_Handler>

08002a32 <SVC_Handler>:
 8002a32:	4770      	bx	lr

08002a34 <DebugMon_Handler>:
 8002a34:	4770      	bx	lr

08002a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a38:	f7fd bdb2 	b.w	80005a0 <HAL_IncTick>

08002a3c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a3c:	4801      	ldr	r0, [pc, #4]	; (8002a44 <OTG_FS_IRQHandler+0x8>)
 8002a3e:	f7fd bed9 	b.w	80007f4 <HAL_PCD_IRQHandler>
 8002a42:	bf00      	nop
 8002a44:	20000e54 	.word	0x20000e54

08002a48 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <SystemInit+0x4c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <SystemInit+0x50>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a64:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002a74:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8002a7e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8002a82:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8002a84:	2200      	movs	r2, #0
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <SystemInit+0x54>)
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	f0ff0000 	.word	0xf0ff0000
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <MX_USB_DEVICE_Init+0x40>)
 8002aa6:	480f      	ldr	r0, [pc, #60]	; (8002ae4 <MX_USB_DEVICE_Init+0x44>)
 8002aa8:	f7ff fb8a 	bl	80021c0 <USBD_Init>
 8002aac:	b108      	cbz	r0, 8002ab2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002aae:	f7ff ff97 	bl	80029e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002ab2:	490d      	ldr	r1, [pc, #52]	; (8002ae8 <MX_USB_DEVICE_Init+0x48>)
 8002ab4:	480b      	ldr	r0, [pc, #44]	; (8002ae4 <MX_USB_DEVICE_Init+0x44>)
 8002ab6:	f7ff fb98 	bl	80021ea <USBD_RegisterClass>
 8002aba:	b108      	cbz	r0, 8002ac0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002abc:	f7ff ff90 	bl	80029e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002ac0:	490a      	ldr	r1, [pc, #40]	; (8002aec <MX_USB_DEVICE_Init+0x4c>)
 8002ac2:	4808      	ldr	r0, [pc, #32]	; (8002ae4 <MX_USB_DEVICE_Init+0x44>)
 8002ac4:	f7ff fb54 	bl	8002170 <USBD_CDC_RegisterInterface>
 8002ac8:	b108      	cbz	r0, 8002ace <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002aca:	f7ff ff89 	bl	80029e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_USB_DEVICE_Init+0x44>)
 8002ad0:	f7ff fb92 	bl	80021f8 <USBD_Start>
 8002ad4:	b118      	cbz	r0, 8002ade <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002ada:	f7ff bf81 	b.w	80029e0 <Error_Handler>
 8002ade:	bd08      	pop	{r3, pc}
 8002ae0:	2000012c 	.word	0x2000012c
 8002ae4:	200003c0 	.word	0x200003c0
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	2000011c 	.word	0x2000011c

08002af0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002af0:	2000      	movs	r0, #0
 8002af2:	4770      	bx	lr

08002af4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr

08002af8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002af8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002afa:	4c05      	ldr	r4, [pc, #20]	; (8002b10 <CDC_Receive_FS+0x18>)
 8002afc:	4601      	mov	r1, r0
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7ff fb45 	bl	800218e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002b04:	4620      	mov	r0, r4
 8002b06:	f7ff fb48 	bl	800219a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	bf00      	nop
 8002b10:	200003c0 	.word	0x200003c0

08002b14 <CDC_Init_FS>:
{
 8002b14:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002b16:	4c06      	ldr	r4, [pc, #24]	; (8002b30 <CDC_Init_FS+0x1c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4906      	ldr	r1, [pc, #24]	; (8002b34 <CDC_Init_FS+0x20>)
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7ff fb2e 	bl	800217e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002b22:	4905      	ldr	r1, [pc, #20]	; (8002b38 <CDC_Init_FS+0x24>)
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff fb32 	bl	800218e <USBD_CDC_SetRxBuffer>
}
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	bf00      	nop
 8002b30:	200003c0 	.word	0x200003c0
 8002b34:	20000a6c 	.word	0x20000a6c
 8002b38:	20000684 	.word	0x20000684

08002b3c <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB_OTG_FS)
 8002b3c:	6803      	ldr	r3, [r0, #0]
{
 8002b3e:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8002b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b44:	d114      	bne.n	8002b70 <HAL_PCD_MspInit+0x34>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b46:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002b4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002b4e:	695a      	ldr	r2, [r3, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002b50:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b56:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002b58:	2200      	movs	r2, #0
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b5a:	695b      	ldr	r3, [r3, #20]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002b5c:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002b66:	f7fd fd51 	bl	800060c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002b6a:	2043      	movs	r0, #67	; 0x43
 8002b6c:	f7fd fd82 	bl	8000674 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002b70:	b003      	add	sp, #12
 8002b72:	f85d fb04 	ldr.w	pc, [sp], #4

08002b76 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002b76:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8002b7a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002b7e:	f7ff bb52 	b.w	8002226 <USBD_LL_SetupStage>

08002b82 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002b82:	231c      	movs	r3, #28
 8002b84:	fb03 0301 	mla	r3, r3, r1, r0
 8002b88:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002b8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002b90:	f7ff bb76 	b.w	8002280 <USBD_LL_DataOutStage>

08002b94 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002b94:	231c      	movs	r3, #28
 8002b96:	fb03 0301 	mla	r3, r3, r1, r0
 8002b9a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ba0:	f7ff bba8 	b.w	80022f4 <USBD_LL_DataInStage>

08002ba4 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002ba4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002ba8:	f7ff bc3c 	b.w	8002424 <USBD_LL_SOF>

08002bac <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002bac:	68c3      	ldr	r3, [r0, #12]
{ 
 8002bae:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002bb0:	2b02      	cmp	r3, #2
{ 
 8002bb2:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002bb4:	d001      	beq.n	8002bba <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002bb6:	f7ff ff13 	bl	80029e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002bba:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	f7ff fc1a 	bl	80023f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002bc4:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 8002bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002bcc:	f7ff bbed 	b.w	80023aa <USBD_LL_Reset>

08002bd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002bd4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002bd8:	f7ff fc11 	bl	80023fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  if (hpcd->Init.low_power_enable)
 8002bea:	6a23      	ldr	r3, [r4, #32]
 8002bec:	b123      	cbz	r3, 8002bf8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002bee:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <HAL_PCD_SuspendCallback+0x2c>)
 8002bf0:	6913      	ldr	r3, [r2, #16]
 8002bf2:	f043 0306 	orr.w	r3, r3, #6
 8002bf6:	6113      	str	r3, [r2, #16]
 8002bf8:	bd10      	pop	{r4, pc}
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002c00:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c04:	f7ff bc04 	b.w	8002410 <USBD_LL_Resume>

08002c08 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002c08:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c0c:	f7ff bc18 	b.w	8002440 <USBD_LL_IsoOUTIncomplete>

08002c10 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002c10:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c14:	f7ff bc12 	b.w	800243c <USBD_LL_IsoINIncomplete>

08002c18 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8002c18:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c1c:	f7ff bc12 	b.w	8002444 <USBD_LL_DevConnected>

08002c20 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8002c20:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c24:	f7ff bc10 	b.w	8002448 <USBD_LL_DevDisconnected>

08002c28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002c28:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8002c2a:	7802      	ldrb	r2, [r0, #0]
 8002c2c:	bb12      	cbnz	r2, 8002c74 <USBD_LL_Init+0x4c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <USBD_LL_Init+0x50>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002c30:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8002c32:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8002c36:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002c3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c3e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c42:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c44:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c46:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c4e:	f7fd fd35 	bl	80006bc <HAL_PCD_Init>
 8002c52:	b108      	cbz	r0, 8002c58 <USBD_LL_Init+0x30>
  {
    Error_Handler( );
 8002c54:	f7ff fec4 	bl	80029e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	4807      	ldr	r0, [pc, #28]	; (8002c78 <USBD_LL_Init+0x50>)
 8002c5c:	f7fe f93b 	bl	8000ed6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8002c60:	2240      	movs	r2, #64	; 0x40
 8002c62:	2100      	movs	r1, #0
 8002c64:	4804      	ldr	r0, [pc, #16]	; (8002c78 <USBD_LL_Init+0x50>)
 8002c66:	f7fe f915 	bl	8000e94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4802      	ldr	r0, [pc, #8]	; (8002c78 <USBD_LL_Init+0x50>)
 8002c70:	f7fe f910 	bl	8000e94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8002c74:	2000      	movs	r0, #0
 8002c76:	bd08      	pop	{r3, pc}
 8002c78:	20000e54 	.word	0x20000e54

08002c7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002c7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002c7e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002c82:	f7fd fda2 	bl	80007ca <HAL_PCD_Start>
 8002c86:	2803      	cmp	r0, #3
 8002c88:	bf9a      	itte	ls
 8002c8a:	4b02      	ldrls	r3, [pc, #8]	; (8002c94 <USBD_LL_Start+0x18>)
 8002c8c:	5c18      	ldrbls	r0, [r3, r0]
 8002c8e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002c90:	bd08      	pop	{r3, pc}
 8002c92:	bf00      	nop
 8002c94:	08002f72 	.word	0x08002f72

08002c98 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002c9c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	f7fd fff0 	bl	8000c88 <HAL_PCD_EP_Open>
 8002ca8:	2803      	cmp	r0, #3
 8002caa:	bf9a      	itte	ls
 8002cac:	4b01      	ldrls	r3, [pc, #4]	; (8002cb4 <USBD_LL_OpenEP+0x1c>)
 8002cae:	5c18      	ldrbls	r0, [r3, r0]
 8002cb0:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002cb2:	bd10      	pop	{r4, pc}
 8002cb4:	08002f72 	.word	0x08002f72

08002cb8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cb8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002cba:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002cbe:	f7fe f817 	bl	8000cf0 <HAL_PCD_EP_Close>
 8002cc2:	2803      	cmp	r0, #3
 8002cc4:	bf9a      	itte	ls
 8002cc6:	4b02      	ldrls	r3, [pc, #8]	; (8002cd0 <USBD_LL_CloseEP+0x18>)
 8002cc8:	5c18      	ldrbls	r0, [r3, r0]
 8002cca:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8002ccc:	bd08      	pop	{r3, pc}
 8002cce:	bf00      	nop
 8002cd0:	08002f72 	.word	0x08002f72

08002cd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cd4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002cd6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002cda:	f7fe f873 	bl	8000dc4 <HAL_PCD_EP_SetStall>
 8002cde:	2803      	cmp	r0, #3
 8002ce0:	bf9a      	itte	ls
 8002ce2:	4b02      	ldrls	r3, [pc, #8]	; (8002cec <USBD_LL_StallEP+0x18>)
 8002ce4:	5c18      	ldrbls	r0, [r3, r0]
 8002ce6:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002ce8:	bd08      	pop	{r3, pc}
 8002cea:	bf00      	nop
 8002cec:	08002f72 	.word	0x08002f72

08002cf0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cf0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002cf2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002cf6:	f7fe f89c 	bl	8000e32 <HAL_PCD_EP_ClrStall>
 8002cfa:	2803      	cmp	r0, #3
 8002cfc:	bf9a      	itte	ls
 8002cfe:	4b02      	ldrls	r3, [pc, #8]	; (8002d08 <USBD_LL_ClearStallEP+0x18>)
 8002d00:	5c18      	ldrbls	r0, [r3, r0]
 8002d02:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8002d04:	bd08      	pop	{r3, pc}
 8002d06:	bf00      	nop
 8002d08:	08002f72 	.word	0x08002f72

08002d0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002d0c:	221c      	movs	r2, #28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002d0e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002d12:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002d16:	bf1b      	ittet	ne
 8002d18:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8002d1c:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002d20:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002d24:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002d28:	bf08      	it	eq
 8002d2a:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8002d2e:	4770      	bx	lr

08002d30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002d30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002d32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d36:	f7fd ff93 	bl	8000c60 <HAL_PCD_SetAddress>
 8002d3a:	2803      	cmp	r0, #3
 8002d3c:	bf9a      	itte	ls
 8002d3e:	4b02      	ldrls	r3, [pc, #8]	; (8002d48 <USBD_LL_SetUSBAddress+0x18>)
 8002d40:	5c18      	ldrbls	r0, [r3, r0]
 8002d42:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002d44:	bd08      	pop	{r3, pc}
 8002d46:	bf00      	nop
 8002d48:	08002f72 	.word	0x08002f72

08002d4c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002d4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002d4e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d52:	f7fe f81c 	bl	8000d8e <HAL_PCD_EP_Transmit>
 8002d56:	2803      	cmp	r0, #3
 8002d58:	bf9a      	itte	ls
 8002d5a:	4b02      	ldrls	r3, [pc, #8]	; (8002d64 <USBD_LL_Transmit+0x18>)
 8002d5c:	5c18      	ldrbls	r0, [r3, r0]
 8002d5e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8002d60:	bd08      	pop	{r3, pc}
 8002d62:	bf00      	nop
 8002d64:	08002f72 	.word	0x08002f72

08002d68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002d68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002d6a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d6e:	f7fd ffe9 	bl	8000d44 <HAL_PCD_EP_Receive>
 8002d72:	2803      	cmp	r0, #3
 8002d74:	bf9a      	itte	ls
 8002d76:	4b02      	ldrls	r3, [pc, #8]	; (8002d80 <USBD_LL_PrepareReceive+0x18>)
 8002d78:	5c18      	ldrbls	r0, [r3, r0]
 8002d7a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002d7c:	bd08      	pop	{r3, pc}
 8002d7e:	bf00      	nop
 8002d80:	08002f72 	.word	0x08002f72

08002d84 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002d84:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d88:	f7fd bff9 	b.w	8000d7e <HAL_PCD_EP_GetRxCount>

08002d8c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002d8c:	4800      	ldr	r0, [pc, #0]	; (8002d90 <USBD_static_malloc+0x4>)
 8002d8e:	4770      	bx	lr
 8002d90:	2000019c 	.word	0x2000019c

08002d94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002d94:	4770      	bx	lr
	...

08002d98 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002d98:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002d9a:	4801      	ldr	r0, [pc, #4]	; (8002da0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002d9c:	800b      	strh	r3, [r1, #0]
}
 8002d9e:	4770      	bx	lr
 8002da0:	20000148 	.word	0x20000148

08002da4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002da4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002da6:	4801      	ldr	r0, [pc, #4]	; (8002dac <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002da8:	800b      	strh	r3, [r1, #0]
}
 8002daa:	4770      	bx	lr
 8002dac:	2000015c 	.word	0x2000015c

08002db0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8002db0:	2300      	movs	r3, #0
{
 8002db2:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002db4:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8002db6:	b2dc      	uxtb	r4, r3
 8002db8:	42a2      	cmp	r2, r4
 8002dba:	d800      	bhi.n	8002dbe <IntToUnicode+0xe>
  }
}
 8002dbc:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8002dbe:	0f04      	lsrs	r4, r0, #28
 8002dc0:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8002dc2:	bf94      	ite	ls
 8002dc4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002dc6:	3437      	addhi	r4, #55	; 0x37
 8002dc8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002dcc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8002dd0:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002dd2:	7065      	strb	r5, [r4, #1]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	e7ee      	b.n	8002db6 <IntToUnicode+0x6>

08002dd8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002dd8:	231a      	movs	r3, #26
{
 8002dda:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002ddc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <USBD_FS_SerialStrDescriptor+0x2c>)
 8002de0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002de2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002de4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8002de6:	18c0      	adds	r0, r0, r3
 8002de8:	d00a      	beq.n	8002e00 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002dec:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002dee:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002df0:	4906      	ldr	r1, [pc, #24]	; (8002e0c <USBD_FS_SerialStrDescriptor+0x34>)
 8002df2:	f7ff ffdd 	bl	8002db0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002df6:	2204      	movs	r2, #4
 8002df8:	4905      	ldr	r1, [pc, #20]	; (8002e10 <USBD_FS_SerialStrDescriptor+0x38>)
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7ff ffd8 	bl	8002db0 <IntToUnicode>
}
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <USBD_FS_SerialStrDescriptor+0x3c>)
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	1ffff7e8 	.word	0x1ffff7e8
 8002e08:	1ffff7ec 	.word	0x1ffff7ec
 8002e0c:	20000162 	.word	0x20000162
 8002e10:	20000172 	.word	0x20000172
 8002e14:	20000160 	.word	0x20000160

08002e18 <USBD_FS_ManufacturerStrDescriptor>:
{
 8002e18:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002e1a:	4c04      	ldr	r4, [pc, #16]	; (8002e2c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	4804      	ldr	r0, [pc, #16]	; (8002e30 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002e20:	4621      	mov	r1, r4
 8002e22:	f7ff fd18 	bl	8002856 <USBD_GetString>
}
 8002e26:	4620      	mov	r0, r4
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20001254 	.word	0x20001254
 8002e30:	08002f8f 	.word	0x08002f8f

08002e34 <USBD_FS_ProductStrDescriptor>:
{
 8002e34:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002e36:	4c04      	ldr	r4, [pc, #16]	; (8002e48 <USBD_FS_ProductStrDescriptor+0x14>)
 8002e38:	460a      	mov	r2, r1
 8002e3a:	4804      	ldr	r0, [pc, #16]	; (8002e4c <USBD_FS_ProductStrDescriptor+0x18>)
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	f7ff fd0a 	bl	8002856 <USBD_GetString>
}
 8002e42:	4620      	mov	r0, r4
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	bf00      	nop
 8002e48:	20001254 	.word	0x20001254
 8002e4c:	08002fa2 	.word	0x08002fa2

08002e50 <USBD_FS_ConfigStrDescriptor>:
{
 8002e50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002e52:	4c04      	ldr	r4, [pc, #16]	; (8002e64 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002e54:	460a      	mov	r2, r1
 8002e56:	4804      	ldr	r0, [pc, #16]	; (8002e68 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002e58:	4621      	mov	r1, r4
 8002e5a:	f7ff fcfc 	bl	8002856 <USBD_GetString>
}
 8002e5e:	4620      	mov	r0, r4
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	bf00      	nop
 8002e64:	20001254 	.word	0x20001254
 8002e68:	08002f76 	.word	0x08002f76

08002e6c <USBD_FS_InterfaceStrDescriptor>:
{
 8002e6c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002e6e:	4c04      	ldr	r4, [pc, #16]	; (8002e80 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002e70:	460a      	mov	r2, r1
 8002e72:	4804      	ldr	r0, [pc, #16]	; (8002e84 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002e74:	4621      	mov	r1, r4
 8002e76:	f7ff fcee 	bl	8002856 <USBD_GetString>
}
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	bf00      	nop
 8002e80:	20001254 	.word	0x20001254
 8002e84:	08002f81 	.word	0x08002f81

08002e88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e8a:	e003      	b.n	8002e94 <LoopCopyDataInit>

08002e8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e92:	3104      	adds	r1, #4

08002e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e94:	480a      	ldr	r0, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e9c:	d3f6      	bcc.n	8002e8c <CopyDataInit>
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ea0:	e002      	b.n	8002ea8 <LoopFillZerobss>

08002ea2 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ea4:	f842 3b04 	str.w	r3, [r2], #4

08002ea8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002eaa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002eac:	d3f9      	bcc.n	8002ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eae:	f7ff fdcb 	bl	8002a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f000 f80f 	bl	8002ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eb6:	f7ff fd89 	bl	80029cc <main>
  bx lr
 8002eba:	4770      	bx	lr
  ldr r3, =_sidata
 8002ebc:	08002fc8 	.word	0x08002fc8
  ldr r0, =_sdata
 8002ec0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ec4:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8002ec8:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8002ecc:	20001454 	.word	0x20001454

08002ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC1_2_IRQHandler>
	...

08002ed4 <__libc_init_array>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	2500      	movs	r5, #0
 8002ed8:	4e0c      	ldr	r6, [pc, #48]	; (8002f0c <__libc_init_array+0x38>)
 8002eda:	4c0d      	ldr	r4, [pc, #52]	; (8002f10 <__libc_init_array+0x3c>)
 8002edc:	1ba4      	subs	r4, r4, r6
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	42a5      	cmp	r5, r4
 8002ee2:	d109      	bne.n	8002ef8 <__libc_init_array+0x24>
 8002ee4:	f000 f822 	bl	8002f2c <_init>
 8002ee8:	2500      	movs	r5, #0
 8002eea:	4e0a      	ldr	r6, [pc, #40]	; (8002f14 <__libc_init_array+0x40>)
 8002eec:	4c0a      	ldr	r4, [pc, #40]	; (8002f18 <__libc_init_array+0x44>)
 8002eee:	1ba4      	subs	r4, r4, r6
 8002ef0:	10a4      	asrs	r4, r4, #2
 8002ef2:	42a5      	cmp	r5, r4
 8002ef4:	d105      	bne.n	8002f02 <__libc_init_array+0x2e>
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002efc:	4798      	blx	r3
 8002efe:	3501      	adds	r5, #1
 8002f00:	e7ee      	b.n	8002ee0 <__libc_init_array+0xc>
 8002f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f06:	4798      	blx	r3
 8002f08:	3501      	adds	r5, #1
 8002f0a:	e7f2      	b.n	8002ef2 <__libc_init_array+0x1e>
 8002f0c:	08002fc0 	.word	0x08002fc0
 8002f10:	08002fc0 	.word	0x08002fc0
 8002f14:	08002fc0 	.word	0x08002fc0
 8002f18:	08002fc4 	.word	0x08002fc4

08002f1c <memset>:
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4402      	add	r2, r0
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d100      	bne.n	8002f26 <memset+0xa>
 8002f24:	4770      	bx	lr
 8002f26:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2a:	e7f9      	b.n	8002f20 <memset+0x4>

08002f2c <_init>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	bf00      	nop
 8002f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f32:	bc08      	pop	{r3}
 8002f34:	469e      	mov	lr, r3
 8002f36:	4770      	bx	lr

08002f38 <_fini>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	bf00      	nop
 8002f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	469e      	mov	lr, r3
 8002f42:	4770      	bx	lr
